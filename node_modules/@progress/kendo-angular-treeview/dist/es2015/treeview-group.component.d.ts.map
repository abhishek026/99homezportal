{"version":3,"file":"treeview-group.component.d.ts","sources":["treeview-group.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TemplateRef, OnChanges, OnInit, OnDestroy } from '@angular/core';\nimport { ExpandStateService } from './expand-state.service';\nimport { IndexBuilderService } from './index-builder.service';\nimport { TreeViewLookupService } from './treeview-lookup.service';\nimport { NavigationService } from './navigation/navigation.service';\nimport { NodeChildrenService } from './node-children.service';\nimport { LoadingNotificationService } from './loading-notification.service';\nimport { CheckedState } from './checkbox/checked-state';\nimport { Observable } from 'rxjs/Observable';\nimport { DataChangeNotificationService } from './data-change-notification.service';\n/**\n * @hidden\n */\nexport declare class TreeViewGroupComponent implements OnChanges, OnInit, OnDestroy {\n    protected expandService: ExpandStateService;\n    protected loadingService: LoadingNotificationService;\n    protected indexBuilder: IndexBuilderService;\n    protected treeViewLookupService: TreeViewLookupService;\n    protected navigationService: NavigationService;\n    protected nodeChildrenService: NodeChildrenService;\n    protected dataChangeNotification: DataChangeNotificationService;\n    kGroupClass: boolean;\n    readonly role: string;\n    checkboxes: boolean;\n    expandIcons: boolean;\n    disabled: boolean;\n    nodes: (node: any, index: string) => Observable<any[]>;\n    textField: string | string[];\n    parentDataItem: any;\n    parentIndex: string;\n    nodeTemplateRef: TemplateRef<any>;\n    data: any[];\n    private _data;\n    private nodesSubscription;\n    private dataChangeSubscription;\n    constructor(expandService: ExpandStateService, loadingService: LoadingNotificationService, indexBuilder: IndexBuilderService, treeViewLookupService: TreeViewLookupService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, dataChangeNotification: DataChangeNotificationService);\n    isChecked: <T>(item: T, index: string) => CheckedState;\n    isDisabled: <T>(item: T, index: string) => boolean;\n    isExpanded: <T>(item: T, index: string) => boolean;\n    isSelected: <T>(item: T, index: string) => boolean;\n    children: <T>(item: T) => Observable<any[]>;\n    hasChildren: <T>(item: T) => boolean;\n    readonly hasTemplate: boolean;\n    expandNode(index: string, dataItem: any, expand: boolean): void;\n    checkNode(index: string): void;\n    nodeIndex(index: number): string;\n    nodeText(dataItem: any): any;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngOnChanges(changes: any): void;\n    fetchChildren(node: any, index: string): Observable<any>;\n    readonly nextFields: string[];\n    private setNodeChildren(children);\n    private mapToTreeItem(data);\n    private emitChildrenLoaded(children);\n    private subscribeToNodesChange();\n}\n"]}