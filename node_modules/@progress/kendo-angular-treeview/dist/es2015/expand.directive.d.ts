import { EventEmitter, OnDestroy } from '@angular/core';
import { TreeViewComponent } from './treeview.component';
import { Subscription } from 'rxjs/Subscription';
/**
 * A directive which manages the expanded state of the TreeView
 * ([see example]({% slug expandedstate_treeview %})).
 */
import * as ɵngcc0 from '@angular/core';
export declare class ExpandDirective implements OnDestroy {
    protected treeView: TreeViewComponent;
    /**
     * @hidden
     */
    isExpanded: <T>(item: T, index: string) => boolean;
    /**
     * Defines the item key that will be stored in the `expandedKeys` collection.
     */
    expandKey: string | ((context: {
        index: string;
        dataItem: any;
    }) => any);
    /**
     * Fires when the `expandedKeys` collection was updated.
     */
    expandedKeysChange: EventEmitter<any[]>;
    /**
     * Defines the collection that will store the expanded keys.
     */
    expandedKeys: any[];
    protected subscriptions: Subscription;
    private _expandedKeys;
    constructor(treeView: TreeViewComponent);
    ngOnDestroy(): void;
    protected itemKey(e: any): any;
    protected toggleExpand({index, dataItem, expand}: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExpandDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ExpandDirective, "[kendoTreeViewExpandable]", never, { "isExpanded": "isExpanded"; "expandedKeys": "expandedKeys"; "expandKey": "expandBy"; }, { "expandedKeysChange": "expandedKeysChange"; }, never>;
}

//# sourceMappingURL=expand.directive.d.ts.map