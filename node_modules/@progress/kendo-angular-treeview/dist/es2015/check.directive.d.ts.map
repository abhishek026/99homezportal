{"version":3,"file":"check.directive.d.ts","sources":["check.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnDestroy, OnChanges, NgZone } from '@angular/core';\nimport { TreeViewComponent } from './treeview.component';\nimport { CheckableSettings } from './checkable-settings';\nimport { CheckedState } from './checkbox/checked-state';\nimport { Subscription } from 'rxjs/Subscription';\n/**\n * A directive which manages the in-memory checked state of the TreeView node\n * ([see example]({% slug checkboxes_treeview %})).\n */\nexport declare class CheckDirective implements OnChanges, OnDestroy {\n    protected treeView: TreeViewComponent;\n    private zone;\n    /**\n     * @hidden\n     */\n    isChecked: <T>(item: T, index: string) => CheckedState;\n    /**\n     * Defines the item key that will be stored in the `checkedKeys` collection.\n     */\n    checkKey: string | ((context: {\n        index: string;\n        dataItem: any;\n    }) => any);\n    /**\n     * Defines the collection that will store the checked keys\n     * ([see example]({% slug checkboxes_treeview %})).\n     */\n    checkedKeys: any[];\n    /**\n     * Defines the collection that will store the checked keys.\n     */\n    checkable: boolean | CheckableSettings;\n    /**\n     * Fires when the `checkedKeys` collection was updated.\n     */\n    checkedKeysChange: EventEmitter<any[]>;\n    protected subscriptions: Subscription;\n    private readonly options;\n    private checkActions;\n    private _checkedKeys;\n    private clickSubscription;\n    constructor(treeView: TreeViewComponent, zone: NgZone);\n    ngOnChanges(changes: any): void;\n    ngOnDestroy(): void;\n    protected isItemChecked(dataItem: any, index: string): CheckedState;\n    protected isIndexChecked(index: string): CheckedState;\n    protected itemKey(e: any): any;\n    protected check(e: any): void;\n    protected checkSingle(node: any): void;\n    protected checkMultiple(node: any): void;\n    protected toggleCheckOnClick(): void;\n    private unsubscribeClick();\n    private checkNode(node, check?);\n    private checkParents(parent);\n    private allChildrenSelected(children);\n    private notify();\n    private addChildrenKeys(args);\n}\n"]}