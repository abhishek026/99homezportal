{"version":3,"file":"treeview.component.d.ts","sources":["treeview.component.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnChanges, OnInit, OnDestroy, NgZone, Renderer2 } from '@angular/core';\nimport { LocalizationService } from '@progress/kendo-angular-l10n';\nimport { NodeTemplateDirective } from './node-template.directive';\nimport { ExpandStateService } from './expand-state.service';\nimport { NodeChildrenService } from './node-children.service';\nimport { NavigationService } from './navigation/navigation.service';\nimport { SelectionService } from './selection/selection.service';\nimport { TreeViewLookupService } from './treeview-lookup.service';\nimport { CheckedState } from './checkbox/checked-state';\nimport { TreeItemLookup } from './treeitem-lookup.interface';\nimport { TreeItem } from './treeitem.interface';\nimport { NodeClickEvent } from './node-click-event.interface';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { DataChangeNotificationService } from './data-change-notification.service';\n/**\n * Represents the [Kendo UI TreeView component for Angular]({% slug overview_treeview %}).\n *\n * @example\n * {% meta height:350 %}\n * ```ts-preview\n * import { Component } from '@angular/core';\n *\n *  _@Component({\n *      selector: 'my-app',\n *      template: `\n *      <kendo-treeview\n *          [nodes]=\"data\"\n *          textField=\"text\"\n *          kendoTreeViewCheckable\n *          kendoTreeViewExpandable\n *          kendoTreeViewSelectable\n *\n *          kendoTreeViewHierarchyBinding\n *          childrenField=\"items\">\n *      </kendo-treeview>\n *  `\n *  })\n *  export class AppComponent {\n *      public data: any[] = [\n *          {\n *              text: \"Furniture\", items: [\n *                  { text: \"Tables & Chairs\" },\n *                  { text: \"Sofas\" },\n *                  { text: \"Occasional Furniture\" }\n *              ]\n *          },\n *          {\n *              text: \"Decor\", items: [\n *                  { text: \"Bed Linen\" },\n *                  { text: \"Curtains & Blinds\" },\n *                  { text: \"Carpets\" }\n *              ]\n *          }\n *      ];\n *  }\n * ```\n * {% endmeta %}\n */\nexport declare class TreeViewComponent implements OnChanges, OnInit, OnDestroy {\n    protected expandService: ExpandStateService;\n    protected navigationService: NavigationService;\n    protected nodeChildrenService: NodeChildrenService;\n    protected selectionService: SelectionService;\n    protected treeViewLookupService: TreeViewLookupService;\n    private ngZone;\n    private renderer;\n    private element;\n    private dataChangeNotification;\n    private localization;\n    classNames: boolean;\n    readonly role: string;\n    /** @hidden */\n    readonly direction: string;\n    /**\n     * Determines whether the content animation is enabled.\n     */\n    animate: boolean;\n    /** @hidden */\n    fetchNodes: () => Subject<any[]>;\n    /**\n     * Fires when the children of the expanded node are loaded.\n     */\n    childrenLoaded: EventEmitter<{\n        children: TreeItem[];\n        item: TreeItem;\n    }>;\n    /**\n     * Fires when the user blurs the component.\n     */\n    onBlur: EventEmitter<any>;\n    /**\n     * Fires when the user focuses the component.\n     */\n    onFocus: EventEmitter<any>;\n    /**\n     * Fires when the user expands a TreeView node.\n     */\n    expand: EventEmitter<TreeItem>;\n    /**\n     * Fires when the user collapses a TreeView node.\n     */\n    collapse: EventEmitter<TreeItem>;\n    /**\n     * Fires when the user selects a TreeView node checkbox\n     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).\n     */\n    checkedChange: EventEmitter<TreeItemLookup>;\n    /**\n     * Fires when the user selects a TreeView node\n     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).\n     */\n    selectionChange: EventEmitter<TreeItem>;\n    /**\n     * Fires when the user clicks a TreeView node.\n     */\n    nodeClick: EventEmitter<NodeClickEvent>;\n    /**\n     * Fires when the user double clicks a TreeView node.\n     */\n    nodeDblClick: EventEmitter<NodeClickEvent>;\n    /**\n     * @hidden\n     */\n    nodeTemplate: NodeTemplateDirective;\n    /**\n     * The nodes which will be displayed by the TreeView\n     * ([see example]({% slug databinding_treeview %})).\n     */\n    nodes: any[];\n    /**\n     * The fields of the data item that provide the text content of the nodes\n     * ([see example]({% slug databinding_treeview %})). If the `textField` input is set\n     * to an array, each hierarchical level uses the field that corresponds to the same\n     * index in the array, or the last item in the array.\n     */\n    textField: string | string[];\n    /**\n     * A function which determines if a specific node has child nodes\n     * ([see example]({% slug databinding_treeview %})).\n     */\n    hasChildren: <T>(item: T) => boolean;\n    /**\n     * A function which determines if a specific node is selected\n     * ([see example]({% slug checkboxes_treeview %}#toc-modifying-the-checked-state)).\n     */\n    isChecked: <T>(item: T, index: string) => CheckedState;\n    /**\n     * A function which determines if a specific node is disabled.\n     */\n    isDisabled: <T>(item: T, index: string) => boolean;\n    /**\n     * A function which determines if a specific node is expanded.\n     */\n    isExpanded: <T>(item: T, index: string) => boolean;\n    /**\n     * A function which determines if a specific node is selected\n     * ([see example]({% slug selection_treeview %}#toc-modifying-the-selection)).\n     */\n    isSelected: <T>(item: T, index: string) => boolean;\n    /**\n     * Determines whether the TreeView keyboard navigable is enabled.\n     */\n    navigable: boolean;\n    /**\n     * A function which provides the child nodes for a given parent node\n     * ([see example]({% slug databinding_treeview %})).\n     */\n    children: <T>(item: T) => Observable<any[]>;\n    checkboxes: boolean;\n    expandIcons: boolean;\n    isActive: boolean;\n    data: Subject<any[]>;\n    private _animate;\n    private _isChecked;\n    private _isExpanded;\n    private _isSelected;\n    private _hasChildren;\n    private subscriptions;\n    private domSubscriptions;\n    constructor(expandService: ExpandStateService, navigationService: NavigationService, nodeChildrenService: NodeChildrenService, selectionService: SelectionService, treeViewLookupService: TreeViewLookupService, ngZone: NgZone, renderer: Renderer2, element: ElementRef, dataChangeNotification: DataChangeNotificationService, localization: LocalizationService);\n    ngOnChanges(_: any): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    /**\n     * Blurs the focused TreeView item.\n     */\n    blur(): void;\n    /**\n     * Focuses the first focusable item in the TreeView component if no hierarchical index is provided.\n     *\n     * @example\n     * ```ts\n     * import { Component } from '@angular/core';\n     *\n     *  @Component({\n     *      selector: 'my-app',\n     *      template: `\n     *      <button (click)=\"treeview.focus('1')\">Focuses the second node</button>\n     *      <kendo-treeview\n     *          #treeview\n     *          [nodes]=\"data\"\n     *          textField=\"text\"\n     *      >\n     *      </kendo-treeview>\n     *  `\n     *  })\n     *  export class AppComponent {\n     *      public data: any[] = [\n     *          { text: \"Furniture\" },\n     *          { text: \"Decor\" }\n     *      ];\n     *  }\n     * ```\n     */\n    focus(index?: string): void;\n    /**\n     * Based on the specified index, returns the TreeItemLookup node.\n     *\n     * @param index - The index of the node.\n     * @returns {TreeItemLookup} - The item that was searched (looked up).\n     */\n    itemLookup(index: string): TreeItemLookup;\n    /**\n     * @hidden\n     */\n    isDisabledNode(node: any): boolean;\n    private attachDomHandlers();\n    private focusHandler(e);\n    private blurHandler(e);\n    private clickHandler(e);\n    private keydownHandler(e);\n}\n"]}