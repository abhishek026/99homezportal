{"version":3,"file":"intl.service.d.ts","sources":["intl.service.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { DateFieldNameOptions, DateFormatOptions, DateFormatNameOptions, NumberFormatOptions, DateFormatPart } from '@telerik/kendo-intl';\n/**\n * An abstract base class that implements\n * the Internationalization service methods\n * for the current locale.\n */\nexport declare abstract class IntlService {\n    /**\n     * @hidden\n     */\n    readonly changes: EventEmitter<any>;\n    /**\n     * Notifies that the service was changed.\n     */\n    notify(): void;\n    /**\n     * Formats a string with placeholders such as\n     * `Total amount {0:c}`.\n     *\n     * @param format - The format string.\n     * @param values - One or more values to output in the format string placeholders.\n     * @return - The formatted string.\n     */\n    abstract format(format: string, ...values: any[]): string;\n    /**\n     * Converts an object into a string based on the specified format.\n     *\n     * @param value - The value to format.\n     * @param format - The format to use.\n     * @param localeId - The locale ID to use in place of the default. Optional.\n     * @return - The formatted object.\n     */\n    abstract toString(value: any, format: string | any, localeId?: string): string;\n    /**\n     * Converts a `Date` object into a string based on the specified format.\n     * If no format is provided, the default short date format is used.\n     *\n     * @param value - The date to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default. Optional.\n     * @return - The formatted date.\n     */\n    abstract formatDate(value: Date, format?: String | DateFormatOptions, localeId?: string): string;\n    /**\n     * Converts a string into a `Date` object based on the specified format.\n     *\n     * @param value - The string to convert.\n     * @param format - The format strings or options.\n     * @param localeId - The locale ID to use in place of the default. Optional.\n     * @return - The parsed date.\n     */\n    abstract parseDate(value: string, format?: string | DateFormatOptions | string[] | DateFormatOptions[], localeId?: string): Date;\n    /**\n     * Converts a string into a `Number`.\n     *\n     * @param value - The string to convert.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default. Optional.\n     * @return - The parsed number.\n     */\n    abstract parseNumber(value: string, format?: string | NumberFormatOptions, localeId?: string): number;\n    /**\n     * Converts a `Number` into a string based on the specified format.\n     *\n     * @param value - The number to format.\n     * @param format - The format string or options.\n     * @param localeId - The locale ID to use in place of the default. Optional.\n     * @return - The formatted number.\n     */\n    abstract formatNumber(value: number, format: string | NumberFormatOptions, localeId?: string): string;\n    /**\n     * Returns the day names from the current locale based on the option.\n     *\n     * @param options - Detailed configuration for the desired date format.\n     * @param localeId - The locale ID to use in place of the default. Optional.\n     * @return - The day names from the current locale based on the option.\n     */\n    abstract dateFormatNames(options: DateFormatNameOptions, localeId?: string): any;\n    /**\n     * Returns a localized date field name based on specific dateFieldName options.\n     *\n     * @param options - Detailed configuration for the desired date field name.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The localized date field name from the current locale based on the option.\n     *\n     * @example\n     * ```\n     * dateFieldName({ type: 'day' });                      //returns 'day';\n     * dateFieldName({ type: 'day', nameType: 'wide' });    //returns 'day';\n     * dateFieldName({ type: 'month', nameType: 'short' }); //returns 'mo.';\n     * dateFieldName({ type: 'month', nameType: 'wide' });  //returns 'month';\n     * ```\n     */\n    abstract dateFieldName(options: DateFieldNameOptions, localeId?: string): string;\n    /**\n     * Splits the date format into objects containing information about each part of the pattern.\n     *\n     * @param format The format string or options.\n     * @param localeId The optional locale id. If not specified, the `\"en\"` locale id is used.\n     * @returns The date format parts.\n     */\n    abstract splitDateFormat(format: string | DateFormatOptions, localeId?: string): DateFormatPart[];\n    /**\n     * Returns the number symbols from the current locale based on the option.\n     *\n     * @param localeId - The locale ID to use in place of the default one. Optional.\n     * @return - The number symbols from the current locale.\n     */\n    abstract numberSymbols(localeId?: string): any;\n    /**\n     * Returns the first day index starting from Sunday.\n     *\n     * @param localeId - The locale ID. Defaults to the current locale ID.\n     * @return - The index of the first day of the week (0 == Sunday).\n     */\n    abstract firstDay(localeId?: string): number;\n}\n"]}