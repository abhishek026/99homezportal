import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';
import { isNil } from 'lodash';
import * as ɵngcc0 from '@angular/core';
var DropdownDirective = /** @class */ (function () {
    function DropdownDirective() {
        // tslint:disable-next-line:no-input-rename
        this.internalOpen = false;
        this.openChange = new EventEmitter();
    }
    Object.defineProperty(DropdownDirective.prototype, "isOpen", {
        get: function () {
            return this.internalOpen;
        },
        enumerable: true,
        configurable: true
    });
    DropdownDirective.prototype.onKeyupEsc = function () {
        this.close();
    };
    DropdownDirective.prototype.onDocumentClick = function (event) {
        if (event.button !== 2 && !this.isEventFromToggle(event)) {
            this.close();
        }
    };
    DropdownDirective.prototype.open = function () {
        if (!this.internalOpen) {
            this.internalOpen = true;
            this.openChange.emit(true);
        }
    };
    DropdownDirective.prototype.close = function () {
        if (this.internalOpen) {
            this.internalOpen = false;
            this.openChange.emit(false);
        }
    };
    DropdownDirective.prototype.toggle = function () {
        if (this.isOpen) {
            this.close();
        }
        else {
            this.open();
        }
    };
    DropdownDirective.prototype.isEventFromToggle = function (event) {
        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);
    };
    DropdownDirective.propDecorators = {
        internalOpen: [{ type: Input, args: ['open',] }],
        openChange: [{ type: Output }],
        isOpen: [{ type: HostBinding, args: ['class.show',] }],
        onKeyupEsc: [{ type: HostListener, args: ['keyup.esc',] }],
        onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]
    };
DropdownDirective.ɵfac = function DropdownDirective_Factory(t) { return new (t || DropdownDirective)(); };
DropdownDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DropdownDirective, selectors: [["", "ngxDropdown", ""]], hostVars: 2, hostBindings: function DropdownDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keyup.esc", function DropdownDirective_keyup_esc_HostBindingHandler() { return ctx.onKeyupEsc(); })("click", function DropdownDirective_click_HostBindingHandler($event) { return ctx.onDocumentClick($event); }, false, ɵngcc0.ɵɵresolveDocument);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("show", ctx.isOpen);
    } }, inputs: { internalOpen: ["open", "internalOpen"] }, outputs: { openChange: "openChange" }, exportAs: ["ngxDropdown"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownDirective, [{
        type: Directive,
        args: [{
                selector: '[ngxDropdown]',
                exportAs: 'ngxDropdown'
            }]
    }], function () { return []; }, { internalOpen: [{
            type: Input,
            args: ['open']
        }], openChange: [{
            type: Output
        }], isOpen: [{
            type: HostBinding,
            args: ['class.show']
        }], onKeyupEsc: [{
            type: HostListener,
            args: ['keyup.esc']
        }], onDocumentClick: [{
            type: HostListener,
            args: ['document:click', ['$event']]
        }] }); })();
    return DropdownDirective;
}());
export { DropdownDirective };

//# sourceMappingURL=dropdown.directive.js.map