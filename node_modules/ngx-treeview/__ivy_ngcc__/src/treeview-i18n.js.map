{"version":3,"file":"treeview-i18n.js","sources":["treeview-i18n.js"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;gDAGM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;0BAGM;AACN;AACA;AACA;AACA","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Injectable } from '@angular/core';\r\nvar TreeviewI18n = /** @class */ (function () {\r\n    function TreeviewI18n() {\r\n    }\r\n    TreeviewI18n.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return TreeviewI18n;\r\n}());\r\nexport { TreeviewI18n };\r\nvar TreeviewI18nDefault = /** @class */ (function (_super) {\r\n    __extends(TreeviewI18nDefault, _super);\r\n    function TreeviewI18nDefault() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    TreeviewI18nDefault.prototype.getText = function (selection) {\r\n        if (selection.uncheckedItems.length === 0) {\r\n            return this.getAllCheckboxText();\r\n        }\r\n        switch (selection.checkedItems.length) {\r\n            case 0:\r\n                return 'Select options';\r\n            case 1:\r\n                return selection.checkedItems[0].text;\r\n            default:\r\n                return selection.checkedItems.length + \" options selected\";\r\n        }\r\n    };\r\n    TreeviewI18nDefault.prototype.getAllCheckboxText = function () {\r\n        return 'All';\r\n    };\r\n    TreeviewI18nDefault.prototype.getFilterPlaceholder = function () {\r\n        return 'Filter';\r\n    };\r\n    TreeviewI18nDefault.prototype.getFilterNoItemsFoundText = function () {\r\n        return 'No items found';\r\n    };\r\n    TreeviewI18nDefault.prototype.getTooltipCollapseExpandText = function (isCollapse) {\r\n        return isCollapse ? 'Expand' : 'Collapse';\r\n    };\r\n    TreeviewI18nDefault.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return TreeviewI18nDefault;\r\n}(TreeviewI18n));\r\nexport { TreeviewI18nDefault };\r\n"]}