{"version":3,"file":"treeview-item.component.js","sources":["treeview-item.component.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAOM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;oBAAM;AACN;AACA;AACA;AACA","sourcesContent":["import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nimport { TreeviewItem } from './treeview-item';\r\nimport { TreeviewConfig } from './treeview-config';\r\nvar TreeviewItemComponent = /** @class */ (function () {\r\n    function TreeviewItemComponent(defaultConfig) {\r\n        var _this = this;\r\n        this.defaultConfig = defaultConfig;\r\n        this.checkedChange = new EventEmitter();\r\n        this.onCollapseExpand = function () {\r\n            _this.item.collapsed = !_this.item.collapsed;\r\n        };\r\n        this.onCheckedChange = function () {\r\n            var checked = _this.item.checked;\r\n            if (!isNil(_this.item.children) && !_this.config.decoupleChildFromParent) {\r\n                _this.item.children.forEach(function (child) { return child.setCheckedRecursive(checked); });\r\n            }\r\n            _this.checkedChange.emit(checked);\r\n        };\r\n        this.config = this.defaultConfig;\r\n    }\r\n    TreeviewItemComponent.prototype.onChildCheckedChange = function (child, checked) {\r\n        if (!this.config.decoupleChildFromParent) {\r\n            var itemChecked = null;\r\n            for (var _i = 0, _a = this.item.children; _i < _a.length; _i++) {\r\n                var childItem = _a[_i];\r\n                if (itemChecked === null) {\r\n                    itemChecked = childItem.checked;\r\n                }\r\n                else if (itemChecked !== childItem.checked) {\r\n                    itemChecked = undefined;\r\n                    break;\r\n                }\r\n            }\r\n            if (itemChecked === null) {\r\n                itemChecked = false;\r\n            }\r\n            if (this.item.checked !== itemChecked) {\r\n                this.item.checked = itemChecked;\r\n            }\r\n        }\r\n        this.checkedChange.emit(checked);\r\n    };\r\n    TreeviewItemComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngx-treeview-item',\r\n                    template: \"\\n      <div *ngIf=\\\"item\\\" class=\\\"treeview-item\\\">\\n          <ng-template [ngTemplateOutlet]=\\\"template\\\" [ngTemplateOutletContext]=\\\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\\\">\\n          </ng-template>\\n          <div *ngIf=\\\"!item.collapsed\\\">\\n              <ngx-treeview-item [config]=\\\"config\\\" *ngFor=\\\"let child of item.children\\\" [item]=\\\"child\\\" [template]=\\\"template\\\" (checkedChange)=\\\"onChildCheckedChange(child, $event)\\\">\\n              </ngx-treeview-item>\\n          </div>\\n      </div>\\n    \",\r\n                    styles: [\"\\n      :host {\\n        display: block;\\n      }\\n\\n      :host .treeview-item {\\n        white-space: nowrap;\\n      }\\n\\n      :host .treeview-item .treeview-item {\\n        margin-left: 2rem;\\n      }\\n    \"]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    TreeviewItemComponent.ctorParameters = function () { return [\r\n        { type: TreeviewConfig }\r\n    ]; };\r\n    TreeviewItemComponent.propDecorators = {\r\n        config: [{ type: Input }],\r\n        template: [{ type: Input }],\r\n        item: [{ type: Input }],\r\n        checkedChange: [{ type: Output }]\r\n    };\r\n    return TreeviewItemComponent;\r\n}());\r\nexport { TreeviewItemComponent };\r\n"]}