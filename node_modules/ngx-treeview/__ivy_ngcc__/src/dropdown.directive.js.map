{"version":3,"file":"dropdown.directive.js","sources":["dropdown.directive.js"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAMM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAM;AACN;AACA;AACA;AACA","sourcesContent":["import { Directive, Input, Output, HostBinding, HostListener, EventEmitter } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nvar DropdownDirective = /** @class */ (function () {\r\n    function DropdownDirective() {\r\n        // tslint:disable-next-line:no-input-rename\r\n        this.internalOpen = false;\r\n        this.openChange = new EventEmitter();\r\n    }\r\n    Object.defineProperty(DropdownDirective.prototype, \"isOpen\", {\r\n        get: function () {\r\n            return this.internalOpen;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DropdownDirective.prototype.onKeyupEsc = function () {\r\n        this.close();\r\n    };\r\n    DropdownDirective.prototype.onDocumentClick = function (event) {\r\n        if (event.button !== 2 && !this.isEventFromToggle(event)) {\r\n            this.close();\r\n        }\r\n    };\r\n    DropdownDirective.prototype.open = function () {\r\n        if (!this.internalOpen) {\r\n            this.internalOpen = true;\r\n            this.openChange.emit(true);\r\n        }\r\n    };\r\n    DropdownDirective.prototype.close = function () {\r\n        if (this.internalOpen) {\r\n            this.internalOpen = false;\r\n            this.openChange.emit(false);\r\n        }\r\n    };\r\n    DropdownDirective.prototype.toggle = function () {\r\n        if (this.isOpen) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    };\r\n    DropdownDirective.prototype.isEventFromToggle = function (event) {\r\n        return !isNil(this.toggleElement) && this.toggleElement.contains(event.target);\r\n    };\r\n    DropdownDirective.decorators = [\r\n        { type: Directive, args: [{\r\n                    selector: '[ngxDropdown]',\r\n                    exportAs: 'ngxDropdown'\r\n                },] },\r\n    ];\r\n    DropdownDirective.propDecorators = {\r\n        internalOpen: [{ type: Input, args: ['open',] }],\r\n        openChange: [{ type: Output }],\r\n        isOpen: [{ type: HostBinding, args: ['class.show',] }],\r\n        onKeyupEsc: [{ type: HostListener, args: ['keyup.esc',] }],\r\n        onDocumentClick: [{ type: HostListener, args: ['document:click', ['$event'],] }]\r\n    };\r\n    return DropdownDirective;\r\n}());\r\nexport { DropdownDirective };\r\n"]}