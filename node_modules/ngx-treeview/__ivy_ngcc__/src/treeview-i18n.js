import * as ɵngcc0 from '@angular/core';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Injectable } from '@angular/core';
var TreeviewI18n = /** @class */ (function () {
    function TreeviewI18n() {
    }
TreeviewI18n.ɵfac = function TreeviewI18n_Factory(t) { return new (t || TreeviewI18n)(); };
TreeviewI18n.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeviewI18n, factory: function (t) { return TreeviewI18n.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeviewI18n, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return TreeviewI18n;
}());
export { TreeviewI18n };
var TreeviewI18nDefault = /** @class */ (function (_super) {
    __extends(TreeviewI18nDefault, _super);
    function TreeviewI18nDefault() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TreeviewI18nDefault.prototype.getText = function (selection) {
        if (selection.uncheckedItems.length === 0) {
            return this.getAllCheckboxText();
        }
        switch (selection.checkedItems.length) {
            case 0:
                return 'Select options';
            case 1:
                return selection.checkedItems[0].text;
            default:
                return selection.checkedItems.length + " options selected";
        }
    };
    TreeviewI18nDefault.prototype.getAllCheckboxText = function () {
        return 'All';
    };
    TreeviewI18nDefault.prototype.getFilterPlaceholder = function () {
        return 'Filter';
    };
    TreeviewI18nDefault.prototype.getFilterNoItemsFoundText = function () {
        return 'No items found';
    };
    TreeviewI18nDefault.prototype.getTooltipCollapseExpandText = function (isCollapse) {
        return isCollapse ? 'Expand' : 'Collapse';
    };
TreeviewI18nDefault.ɵfac = function TreeviewI18nDefault_Factory(t) { return ɵTreeviewI18nDefault_BaseFactory(t || TreeviewI18nDefault); };
TreeviewI18nDefault.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TreeviewI18nDefault, factory: function (t) { return TreeviewI18nDefault.ɵfac(t); } });
var ɵTreeviewI18nDefault_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TreeviewI18nDefault);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeviewI18nDefault, [{
        type: Injectable
    }], null, null); })();
    return TreeviewI18nDefault;
}(TreeviewI18n));
export { TreeviewI18nDefault };

//# sourceMappingURL=treeview-i18n.js.map