{"version":3,"file":"treeview.component.js","sources":["treeview.component.js"],"names":[],"mappingsoBAAM;AACN;AACA;AACA;AACA","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Component, Input, Output, EventEmitter, TemplateRef } from '@angular/core';\r\nimport { isNil, includes } from 'lodash';\r\nimport { TreeviewI18n } from './treeview-i18n';\r\nimport { TreeviewItem } from './treeview-item';\r\nimport { TreeviewConfig } from './treeview-config';\r\nimport { TreeviewEventParser } from './treeview-event-parser';\r\nimport { TreeviewHelper } from './treeview-helper';\r\nvar FilterTreeviewItem = /** @class */ (function (_super) {\r\n    __extends(FilterTreeviewItem, _super);\r\n    function FilterTreeviewItem(item) {\r\n        var _this = _super.call(this, {\r\n            text: item.text,\r\n            value: item.value,\r\n            disabled: item.disabled,\r\n            checked: item.checked,\r\n            collapsed: item.collapsed,\r\n            children: item.children\r\n        }) || this;\r\n        _this.refItem = item;\r\n        return _this;\r\n    }\r\n    FilterTreeviewItem.prototype.updateRefChecked = function () {\r\n        this.children.forEach(function (child) {\r\n            if (child instanceof FilterTreeviewItem) {\r\n                child.updateRefChecked();\r\n            }\r\n        });\r\n        var refChecked = this.checked;\r\n        if (refChecked) {\r\n            for (var _i = 0, _a = this.refItem.children; _i < _a.length; _i++) {\r\n                var refChild = _a[_i];\r\n                if (!refChild.checked) {\r\n                    refChecked = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.refItem.checked = refChecked;\r\n    };\r\n    return FilterTreeviewItem;\r\n}(TreeviewItem));\r\nvar TreeviewComponent = /** @class */ (function () {\r\n    function TreeviewComponent(i18n, defaultConfig, eventParser) {\r\n        this.i18n = i18n;\r\n        this.defaultConfig = defaultConfig;\r\n        this.eventParser = eventParser;\r\n        this.selectedChange = new EventEmitter();\r\n        this.filterChange = new EventEmitter();\r\n        this.filterText = '';\r\n        this.config = this.defaultConfig;\r\n        this.allItem = new TreeviewItem({ text: 'All', value: undefined });\r\n        this.createHeaderTemplateContext();\r\n    }\r\n    Object.defineProperty(TreeviewComponent.prototype, \"hasFilterItems\", {\r\n        get: function () {\r\n            return !isNil(this.filterItems) && this.filterItems.length > 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TreeviewComponent.prototype, \"maxHeight\", {\r\n        get: function () {\r\n            return \"\" + this.config.maxHeight;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    TreeviewComponent.prototype.ngOnChanges = function (changes) {\r\n        var itemsSimpleChange = changes['items'];\r\n        if (!isNil(itemsSimpleChange)) {\r\n            if (!isNil(this.items)) {\r\n                this.updateFilterItems();\r\n                this.updateCollapsedOfAll();\r\n                this.raiseSelectedChange();\r\n            }\r\n        }\r\n        this.createHeaderTemplateContext();\r\n    };\r\n    TreeviewComponent.prototype.onAllCollapseExpand = function () {\r\n        var _this = this;\r\n        this.allItem.collapsed = !this.allItem.collapsed;\r\n        this.filterItems.forEach(function (item) { return item.setCollapsedRecursive(_this.allItem.collapsed); });\r\n    };\r\n    TreeviewComponent.prototype.onFilterTextChange = function (text) {\r\n        this.filterText = text;\r\n        this.filterChange.emit(text);\r\n        this.updateFilterItems();\r\n    };\r\n    TreeviewComponent.prototype.onAllCheckedChange = function () {\r\n        var checked = this.allItem.checked;\r\n        this.filterItems.forEach(function (item) {\r\n            item.setCheckedRecursive(checked);\r\n            if (item instanceof FilterTreeviewItem) {\r\n                item.updateRefChecked();\r\n            }\r\n        });\r\n        this.raiseSelectedChange();\r\n    };\r\n    TreeviewComponent.prototype.onItemCheckedChange = function (item, checked) {\r\n        if (item instanceof FilterTreeviewItem) {\r\n            item.updateRefChecked();\r\n        }\r\n        this.updateCheckedOfAll();\r\n        this.raiseSelectedChange();\r\n    };\r\n    TreeviewComponent.prototype.raiseSelectedChange = function () {\r\n        this.generateSelection();\r\n        var values = this.eventParser.getSelectedChange(this);\r\n        this.selectedChange.emit(values);\r\n    };\r\n    TreeviewComponent.prototype.createHeaderTemplateContext = function () {\r\n        var _this = this;\r\n        this.headerTemplateContext = {\r\n            config: this.config,\r\n            item: this.allItem,\r\n            onCheckedChange: function () { return _this.onAllCheckedChange(); },\r\n            onCollapseExpand: function () { return _this.onAllCollapseExpand(); },\r\n            onFilterTextChange: function (text) { return _this.onFilterTextChange(text); }\r\n        };\r\n    };\r\n    TreeviewComponent.prototype.generateSelection = function () {\r\n        var checkedItems = [];\r\n        var uncheckedItems = [];\r\n        if (!isNil(this.items)) {\r\n            var selection = TreeviewHelper.concatSelection(this.items, checkedItems, uncheckedItems);\r\n            checkedItems = selection.checked;\r\n            uncheckedItems = selection.unchecked;\r\n        }\r\n        this.selection = {\r\n            checkedItems: checkedItems,\r\n            uncheckedItems: uncheckedItems\r\n        };\r\n    };\r\n    TreeviewComponent.prototype.updateFilterItems = function () {\r\n        var _this = this;\r\n        if (this.filterText !== '') {\r\n            var filterItems_1 = [];\r\n            var filterText_1 = this.filterText.toLowerCase();\r\n            this.items.forEach(function (item) {\r\n                var newItem = _this.filterItem(item, filterText_1);\r\n                if (!isNil(newItem)) {\r\n                    filterItems_1.push(newItem);\r\n                }\r\n            });\r\n            this.filterItems = filterItems_1;\r\n        }\r\n        else {\r\n            this.filterItems = this.items;\r\n        }\r\n        this.updateCheckedOfAll();\r\n    };\r\n    TreeviewComponent.prototype.filterItem = function (item, filterText) {\r\n        var _this = this;\r\n        var isMatch = includes(item.text.toLowerCase(), filterText);\r\n        if (isMatch) {\r\n            return item;\r\n        }\r\n        else {\r\n            if (!isNil(item.children)) {\r\n                var children_1 = [];\r\n                item.children.forEach(function (child) {\r\n                    var newChild = _this.filterItem(child, filterText);\r\n                    if (!isNil(newChild)) {\r\n                        children_1.push(newChild);\r\n                    }\r\n                });\r\n                if (children_1.length > 0) {\r\n                    var newItem = new FilterTreeviewItem(item);\r\n                    newItem.collapsed = false;\r\n                    newItem.children = children_1;\r\n                    return newItem;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    TreeviewComponent.prototype.updateCheckedOfAll = function () {\r\n        var itemChecked = null;\r\n        for (var _i = 0, _a = this.filterItems; _i < _a.length; _i++) {\r\n            var filterItem = _a[_i];\r\n            if (itemChecked === null) {\r\n                itemChecked = filterItem.checked;\r\n            }\r\n            else if (itemChecked !== filterItem.checked) {\r\n                itemChecked = undefined;\r\n                break;\r\n            }\r\n        }\r\n        if (itemChecked === null) {\r\n            itemChecked = false;\r\n        }\r\n        this.allItem.checked = itemChecked;\r\n    };\r\n    TreeviewComponent.prototype.updateCollapsedOfAll = function () {\r\n        var hasItemExpanded = false;\r\n        for (var _i = 0, _a = this.filterItems; _i < _a.length; _i++) {\r\n            var filterItem = _a[_i];\r\n            if (!filterItem.collapsed) {\r\n                hasItemExpanded = true;\r\n                break;\r\n            }\r\n        }\r\n        this.allItem.collapsed = !hasItemExpanded;\r\n    };\r\n    TreeviewComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'ngx-treeview',\r\n                    template: \"\\n      <ng-template #defaultItemTemplate let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\" let-onCheckedChange=\\\"onCheckedChange\\\">\\n        <div class=\\\"form-inline row-item\\\">\\n          <i *ngIf=\\\"item.children\\\" (click)=\\\"onCollapseExpand()\\\" aria-hidden=\\\"true\\\" class=\\\"fa\\\" [class.fa-caret-right]=\\\"item.collapsed\\\"\\n            [class.fa-caret-down]=\\\"!item.collapsed\\\"></i>\\n          <div class=\\\"form-check\\\">\\n            <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n              [disabled]=\\\"item.disabled\\\" [indeterminate]=\\\"item.indeterminate\\\" />\\n            <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n              {{item.text}}\\n            </label>\\n          </div>\\n        </div>\\n      </ng-template>\\n      <ng-template #defaultHeaderTemplate let-config=\\\"config\\\" let-item=\\\"item\\\" let-onCollapseExpand=\\\"onCollapseExpand\\\"\\n        let-onCheckedChange=\\\"onCheckedChange\\\" let-onFilterTextChange=\\\"onFilterTextChange\\\">\\n        <div *ngIf=\\\"config.hasFilter\\\" class=\\\"row row-filter\\\">\\n          <div class=\\\"col-12\\\">\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"i18n.getFilterPlaceholder()\\\" [(ngModel)]=\\\"filterText\\\"\\n              (ngModelChange)=\\\"onFilterTextChange($event)\\\" />\\n          </div>\\n        </div>\\n        <div *ngIf=\\\"hasFilterItems\\\">\\n          <div *ngIf=\\\"config.hasAllCheckBox || config.hasCollapseExpand\\\" class=\\\"row row-all\\\">\\n            <div class=\\\"col-12\\\">\\n              <div class=\\\"form-check form-check-inline\\\" *ngIf=\\\"config.hasAllCheckBox\\\">\\n                <input type=\\\"checkbox\\\" class=\\\"form-check-input\\\" [(ngModel)]=\\\"item.checked\\\" (ngModelChange)=\\\"onCheckedChange()\\\"\\n                  [indeterminate]=\\\"item.indeterminate\\\" />\\n                <label class=\\\"form-check-label\\\" (click)=\\\"item.checked = !item.checked; onCheckedChange()\\\">\\n                  {{i18n.getAllCheckboxText()}}\\n                </label>\\n              </div>\\n              <label *ngIf=\\\"config.hasCollapseExpand\\\" class=\\\"pull-right form-check-label\\\" (click)=\\\"onCollapseExpand()\\\">\\n                <i [title]=\\\"i18n.getTooltipCollapseExpandText(item.collapsed)\\\" aria-hidden=\\\"true\\\" class=\\\"fa\\\"\\n                  [class.fa-expand]=\\\"item.collapsed\\\" [class.fa-compress]=\\\"!item.collapsed\\\"></i>\\n              </label>\\n            </div>\\n          </div>\\n          <div *ngIf=\\\"config.hasDivider\\\" class=\\\"dropdown-divider\\\"></div>\\n        </div>\\n      </ng-template>\\n      <div class=\\\"treeview-header\\\">\\n        <ng-template [ngTemplateOutlet]=\\\"headerTemplate || defaultHeaderTemplate\\\" [ngTemplateOutletContext]=\\\"headerTemplateContext\\\">\\n        </ng-template>\\n      </div>\\n      <div [ngSwitch]=\\\"hasFilterItems\\\">\\n        <div *ngSwitchCase=\\\"true\\\" class=\\\"treeview-container\\\" [style.max-height.px]=\\\"maxHeight\\\">\\n          <ngx-treeview-item *ngFor=\\\"let item of filterItems\\\" [config]=\\\"config\\\" [item]=\\\"item\\\" [template]=\\\"itemTemplate || defaultItemTemplate\\\"\\n            (checkedChange)=\\\"onItemCheckedChange(item, $event)\\\">\\n          </ngx-treeview-item>\\n        </div>\\n        <div *ngSwitchCase=\\\"false\\\" class=\\\"treeview-text\\\">\\n          {{i18n.getFilterNoItemsFoundText()}}\\n        </div>\\n      </div>\\n    \",\r\n                    styles: [\"\\n      :host /deep/ .treeview-header .row-filter {\\n        margin-bottom: .5rem;\\n      }\\n\\n      :host /deep/ .treeview-header .row-all .fa {\\n        cursor: pointer;\\n      }\\n\\n      :host /deep/ .treeview-container .row-item {\\n        margin-bottom: .3rem;\\n        flex-wrap: nowrap;\\n      }\\n\\n      :host /deep/ .treeview-container .row-item .fa {\\n        width: .8rem;\\n        cursor: pointer;\\n        margin-right: .3rem;\\n      }\\n\\n      .treeview-container {\\n        overflow-y: auto;\\n        padding-right: .3rem;\\n      }\\n\\n      .treeview-text {\\n        padding: .3rem 0;\\n        white-space: nowrap;\\n      }\\n    \"]\r\n                },] },\r\n    ];\r\n    /** @nocollapse */\r\n    TreeviewComponent.ctorParameters = function () { return [\r\n        { type: TreeviewI18n },\r\n        { type: TreeviewConfig },\r\n        { type: TreeviewEventParser }\r\n    ]; };\r\n    TreeviewComponent.propDecorators = {\r\n        headerTemplate: [{ type: Input }],\r\n        itemTemplate: [{ type: Input }],\r\n        items: [{ type: Input }],\r\n        config: [{ type: Input }],\r\n        selectedChange: [{ type: Output }],\r\n        filterChange: [{ type: Output }]\r\n    };\r\n    return TreeviewComponent;\r\n}());\r\nexport { TreeviewComponent };\r\n"]}