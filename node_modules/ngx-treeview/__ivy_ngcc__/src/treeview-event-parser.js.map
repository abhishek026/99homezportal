{"version":3,"file":"treeview-event-parser.js","sources":["treeview-event-parser.js"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;gDAGM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;0BAGM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;0BAGM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;0BAGM;AACN;AACA;AACA;AACA","sourcesContent":["var __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Injectable } from '@angular/core';\r\nimport { isNil } from 'lodash';\r\nvar TreeviewEventParser = /** @class */ (function () {\r\n    function TreeviewEventParser() {\r\n    }\r\n    TreeviewEventParser.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return TreeviewEventParser;\r\n}());\r\nexport { TreeviewEventParser };\r\nvar DefaultTreeviewEventParser = /** @class */ (function (_super) {\r\n    __extends(DefaultTreeviewEventParser, _super);\r\n    function DefaultTreeviewEventParser() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DefaultTreeviewEventParser.prototype.getSelectedChange = function (component) {\r\n        var checkedItems = component.selection.checkedItems;\r\n        if (!isNil(checkedItems)) {\r\n            return checkedItems.map(function (item) { return item.value; });\r\n        }\r\n        return [];\r\n    };\r\n    DefaultTreeviewEventParser.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return DefaultTreeviewEventParser;\r\n}(TreeviewEventParser));\r\nexport { DefaultTreeviewEventParser };\r\nvar DownlineTreeviewEventParser = /** @class */ (function (_super) {\r\n    __extends(DownlineTreeviewEventParser, _super);\r\n    function DownlineTreeviewEventParser() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    DownlineTreeviewEventParser.prototype.getSelectedChange = function (component) {\r\n        var _this = this;\r\n        var items = component.items;\r\n        if (!isNil(items)) {\r\n            var result_1 = [];\r\n            items.forEach(function (item) {\r\n                var links = _this.getLinks(item, null);\r\n                if (!isNil(links)) {\r\n                    result_1 = result_1.concat(links);\r\n                }\r\n            });\r\n            return result_1;\r\n        }\r\n        return [];\r\n    };\r\n    DownlineTreeviewEventParser.prototype.getLinks = function (item, parent) {\r\n        var _this = this;\r\n        if (!isNil(item.children)) {\r\n            var link_1 = {\r\n                item: item,\r\n                parent: parent\r\n            };\r\n            var result_2 = [];\r\n            item.children.forEach(function (child) {\r\n                var links = _this.getLinks(child, link_1);\r\n                if (!isNil(links)) {\r\n                    result_2 = result_2.concat(links);\r\n                }\r\n            });\r\n            return result_2;\r\n        }\r\n        if (item.checked) {\r\n            return [{\r\n                    item: item,\r\n                    parent: parent\r\n                }];\r\n        }\r\n        return null;\r\n    };\r\n    DownlineTreeviewEventParser.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return DownlineTreeviewEventParser;\r\n}(TreeviewEventParser));\r\nexport { DownlineTreeviewEventParser };\r\nvar OrderDownlineTreeviewEventParser = /** @class */ (function (_super) {\r\n    __extends(OrderDownlineTreeviewEventParser, _super);\r\n    function OrderDownlineTreeviewEventParser() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.currentDownlines = [];\r\n        _this.parser = new DownlineTreeviewEventParser();\r\n        return _this;\r\n    }\r\n    OrderDownlineTreeviewEventParser.prototype.getSelectedChange = function (component) {\r\n        var newDownlines = this.parser.getSelectedChange(component);\r\n        if (this.currentDownlines.length === 0) {\r\n            this.currentDownlines = newDownlines;\r\n        }\r\n        else {\r\n            var intersectDownlines_1 = [];\r\n            this.currentDownlines.forEach(function (downline) {\r\n                var foundIndex = -1;\r\n                var length = newDownlines.length;\r\n                for (var i = 0; i < length; i++) {\r\n                    if (downline.item.value === newDownlines[i].item.value) {\r\n                        foundIndex = i;\r\n                        break;\r\n                    }\r\n                }\r\n                if (foundIndex !== -1) {\r\n                    intersectDownlines_1.push(newDownlines[foundIndex]);\r\n                    newDownlines.splice(foundIndex, 1);\r\n                }\r\n            });\r\n            this.currentDownlines = intersectDownlines_1.concat(newDownlines);\r\n        }\r\n        return this.currentDownlines;\r\n    };\r\n    OrderDownlineTreeviewEventParser.decorators = [\r\n        { type: Injectable },\r\n    ];\r\n    return OrderDownlineTreeviewEventParser;\r\n}(TreeviewEventParser));\r\nexport { OrderDownlineTreeviewEventParser };\r\n"]}