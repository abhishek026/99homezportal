import { Component, EventEmitter, Input, Output, ViewChild, TemplateRef } from '@angular/core';
import { TreeviewI18n } from './treeview-i18n';
import { TreeviewConfig } from './treeview-config';
import { TreeviewComponent } from './treeview.component';
import { DropdownDirective } from './dropdown.directive';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './dropdown.directive';
import * as ɵngcc2 from './dropdown-toggle.directive';
import * as ɵngcc3 from '@angular/common';
import * as ɵngcc4 from './dropdown-menu.directive';
import * as ɵngcc5 from './treeview.component';
var DropdownTreeviewComponent = /** @class */ (function () {
    function DropdownTreeviewComponent(i18n, defaultConfig) {
        this.i18n = i18n;
        this.defaultConfig = defaultConfig;
        this.buttonClass = 'btn-outline-secondary';
        this.selectedChange = new EventEmitter(true);
        this.filterChange = new EventEmitter();
        this.config = this.defaultConfig;
    }
    DropdownTreeviewComponent.prototype.getText = function () {
        return this.i18n.getText(this.treeviewComponent.selection);
    };
    DropdownTreeviewComponent.prototype.onSelectedChange = function (values) {
        this.selectedChange.emit(values);
    };
    DropdownTreeviewComponent.prototype.onFilterChange = function (text) {
        this.filterChange.emit(text);
    };
    /** @nocollapse */
    DropdownTreeviewComponent.ctorParameters = function () { return [
        { type: TreeviewI18n },
        { type: TreeviewConfig }
    ]; };
    DropdownTreeviewComponent.propDecorators = {
        buttonClass: [{ type: Input }],
        headerTemplate: [{ type: Input }],
        itemTemplate: [{ type: Input }],
        items: [{ type: Input }],
        config: [{ type: Input }],
        selectedChange: [{ type: Output }],
        filterChange: [{ type: Output }],
        treeviewComponent: [{ type: ViewChild, args: [TreeviewComponent,] }],
        dropdownDirective: [{ type: ViewChild, args: [DropdownDirective,] }]
    };
DropdownTreeviewComponent.ɵfac = function DropdownTreeviewComponent_Factory(t) { return new (t || DropdownTreeviewComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewI18n), ɵngcc0.ɵɵdirectiveInject(TreeviewConfig)); };
DropdownTreeviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DropdownTreeviewComponent, selectors: [["ngx-dropdown-treeview"]], viewQuery: function DropdownTreeviewComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(TreeviewComponent, true);
        ɵngcc0.ɵɵviewQuery(DropdownDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeviewComponent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dropdownDirective = _t.first);
    } }, inputs: { buttonClass: "buttonClass", config: "config", headerTemplate: "headerTemplate", itemTemplate: "itemTemplate", items: "items" }, outputs: { selectedChange: "selectedChange", filterChange: "filterChange" }, decls: 6, vars: 6, consts: [["ngxDropdown", "", 1, "dropdown"], ["type", "button", "role", "button", "ngxDropdownToggle", "", 1, "btn", 3, "ngClass"], ["ngxDropdownMenu", "", "aria-labelledby", "dropdownMenu", 3, "click"], [1, "dropdown-container"], [3, "config", "headerTemplate", "items", "itemTemplate", "selectedChange", "filterChange"]], template: function DropdownTreeviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelementStart(1, "button", 1);
        ɵngcc0.ɵɵtext(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "div", 2);
        ɵngcc0.ɵɵlistener("click", function DropdownTreeviewComponent_Template_div_click_3_listener($event) { return $event.stopPropagation(); });
        ɵngcc0.ɵɵelementStart(4, "div", 3);
        ɵngcc0.ɵɵelementStart(5, "ngx-treeview", 4);
        ɵngcc0.ɵɵlistener("selectedChange", function DropdownTreeviewComponent_Template_ngx_treeview_selectedChange_5_listener($event) { return ctx.onSelectedChange($event); })("filterChange", function DropdownTreeviewComponent_Template_ngx_treeview_filterChange_5_listener($event) { return ctx.onFilterChange($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngClass", ctx.buttonClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.getText(), " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("config", ctx.config)("headerTemplate", ctx.headerTemplate)("items", ctx.items)("itemTemplate", ctx.itemTemplate);
    } }, directives: [ɵngcc1.DropdownDirective, ɵngcc2.DropdownToggleDirective, ɵngcc3.NgClass, ɵngcc4.DropdownMenuDirective, ɵngcc5.TreeviewComponent], styles: [".dropdown[_ngcontent-%COMP%] {\n        width: 100%;\n        display: inline-block;\n      }\n\n      .dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\n        width: 100%;\n        margin-right: .9rem;\n        text-align: left;\n        overflow: hidden;\n        padding-right: 30px;\n        text-overflow: ellipsis;\n      }\n\n      .dropdown[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]::after {\n        position: absolute;\n        right: .6rem;\n        margin-top: .6rem;\n      }\n\n      .dropdown[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]   .dropdown-container[_ngcontent-%COMP%] {\n        padding: 0 .6rem;\n      }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownTreeviewComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-dropdown-treeview',
                template: "\n      <div class=\"dropdown\" ngxDropdown>\n        <button class=\"btn\" [ngClass]=\"buttonClass\" type=\"button\" role=\"button\" ngxDropdownToggle>\n          {{getText()}}\n        </button>\n        <div ngxDropdownMenu aria-labelledby=\"dropdownMenu\" (click)=\"$event.stopPropagation()\">\n          <div class=\"dropdown-container\">\n            <ngx-treeview [config]=\"config\" [headerTemplate]=\"headerTemplate\" [items]=\"items\" [itemTemplate]=\"itemTemplate\" (selectedChange)=\"onSelectedChange($event)\"\n              (filterChange)=\"onFilterChange($event)\">\n            </ngx-treeview>\n          </div>\n        </div>\n      </div>\n    ",
                styles: ["\n      .dropdown {\n        width: 100%;\n        display: inline-block;\n      }\n\n      .dropdown button {\n        width: 100%;\n        margin-right: .9rem;\n        text-align: left;\n        overflow: hidden;\n        padding-right: 30px;\n        text-overflow: ellipsis;\n      }\n\n      .dropdown button::after {\n        position: absolute;\n        right: .6rem;\n        margin-top: .6rem;\n      }\n\n      .dropdown .dropdown-menu .dropdown-container {\n        padding: 0 .6rem;\n      }\n    "]
            }]
    }], function () { return [{ type: TreeviewI18n }, { type: TreeviewConfig }]; }, { buttonClass: [{
            type: Input
        }], selectedChange: [{
            type: Output
        }], filterChange: [{
            type: Output
        }], config: [{
            type: Input
        }], headerTemplate: [{
            type: Input
        }], itemTemplate: [{
            type: Input
        }], items: [{
            type: Input
        }], treeviewComponent: [{
            type: ViewChild,
            args: [TreeviewComponent]
        }], dropdownDirective: [{
            type: ViewChild,
            args: [DropdownDirective]
        }] }); })();
    return DropdownTreeviewComponent;
}());
export { DropdownTreeviewComponent };

//# sourceMappingURL=dropdown-treeview.component.js.map