import { Component, EventEmitter, Input, Output, TemplateRef } from '@angular/core';
import { isNil } from 'lodash';
import { TreeviewItem } from './treeview-item';
import { TreeviewConfig } from './treeview-config';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function TreeviewItemComponent_div_0_ng_template_1_Template(rf, ctx) { }
function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ngx-treeview-item", 5);
    ɵngcc0.ɵɵlistener("checkedChange", function TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template_ngx_treeview_item_checkedChange_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); var child_r4 = ctx.$implicit; var ctx_r5 = ɵngcc0.ɵɵnextContext(3); return ctx_r5.onChildCheckedChange(child_r4, $event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var child_r4 = ctx.$implicit;
    var ctx_r3 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("config", ctx_r3.config)("item", child_r4)("template", ctx_r3.template);
} }
function TreeviewItemComponent_div_0_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_div_2_ngx_treeview_item_1_Template, 1, 3, "ngx-treeview-item", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r2.item.children);
} }
var _c0 = function (a0, a1, a2) { return { item: a0, onCollapseExpand: a1, onCheckedChange: a2 }; };
function TreeviewItemComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, TreeviewItemComponent_div_0_ng_template_1_Template, 0, 0, "ng-template", 2);
    ɵngcc0.ɵɵtemplate(2, TreeviewItemComponent_div_0_div_2_Template, 2, 1, "div", 3);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r0.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction3(3, _c0, ctx_r0.item, ctx_r0.onCollapseExpand, ctx_r0.onCheckedChange));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.item.collapsed);
} }
var TreeviewItemComponent = /** @class */ (function () {
    function TreeviewItemComponent(defaultConfig) {
        var _this = this;
        this.defaultConfig = defaultConfig;
        this.checkedChange = new EventEmitter();
        this.onCollapseExpand = function () {
            _this.item.collapsed = !_this.item.collapsed;
        };
        this.onCheckedChange = function () {
            var checked = _this.item.checked;
            if (!isNil(_this.item.children) && !_this.config.decoupleChildFromParent) {
                _this.item.children.forEach(function (child) { return child.setCheckedRecursive(checked); });
            }
            _this.checkedChange.emit(checked);
        };
        this.config = this.defaultConfig;
    }
    TreeviewItemComponent.prototype.onChildCheckedChange = function (child, checked) {
        if (!this.config.decoupleChildFromParent) {
            var itemChecked = null;
            for (var _i = 0, _a = this.item.children; _i < _a.length; _i++) {
                var childItem = _a[_i];
                if (itemChecked === null) {
                    itemChecked = childItem.checked;
                }
                else if (itemChecked !== childItem.checked) {
                    itemChecked = undefined;
                    break;
                }
            }
            if (itemChecked === null) {
                itemChecked = false;
            }
            if (this.item.checked !== itemChecked) {
                this.item.checked = itemChecked;
            }
        }
        this.checkedChange.emit(checked);
    };
    /** @nocollapse */
    TreeviewItemComponent.ctorParameters = function () { return [
        { type: TreeviewConfig }
    ]; };
    TreeviewItemComponent.propDecorators = {
        config: [{ type: Input }],
        template: [{ type: Input }],
        item: [{ type: Input }],
        checkedChange: [{ type: Output }]
    };
TreeviewItemComponent.ɵfac = function TreeviewItemComponent_Factory(t) { return new (t || TreeviewItemComponent)(ɵngcc0.ɵɵdirectiveInject(TreeviewConfig)); };
TreeviewItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TreeviewItemComponent, selectors: [["ngx-treeview-item"]], inputs: { config: "config", template: "template", item: "item" }, outputs: { checkedChange: "checkedChange" }, decls: 1, vars: 1, consts: [["class", "treeview-item", 4, "ngIf"], [1, "treeview-item"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], [3, "config", "item", "template", "checkedChange", 4, "ngFor", "ngForOf"], [3, "config", "item", "template", "checkedChange"]], template: function TreeviewItemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, TreeviewItemComponent_div_0_Template, 3, 7, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.item);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgForOf, TreeviewItemComponent], styles: ["[_nghost-%COMP%] {\n        display: block;\n      }\n\n      [_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%] {\n        white-space: nowrap;\n      }\n\n      [_nghost-%COMP%]   .treeview-item[_ngcontent-%COMP%]   .treeview-item[_ngcontent-%COMP%] {\n        margin-left: 2rem;\n      }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TreeviewItemComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-treeview-item',
                template: "\n      <div *ngIf=\"item\" class=\"treeview-item\">\n          <ng-template [ngTemplateOutlet]=\"template\" [ngTemplateOutletContext]=\"{item: item, onCollapseExpand: onCollapseExpand, onCheckedChange: onCheckedChange}\">\n          </ng-template>\n          <div *ngIf=\"!item.collapsed\">\n              <ngx-treeview-item [config]=\"config\" *ngFor=\"let child of item.children\" [item]=\"child\" [template]=\"template\" (checkedChange)=\"onChildCheckedChange(child, $event)\">\n              </ngx-treeview-item>\n          </div>\n      </div>\n    ",
                styles: ["\n      :host {\n        display: block;\n      }\n\n      :host .treeview-item {\n        white-space: nowrap;\n      }\n\n      :host .treeview-item .treeview-item {\n        margin-left: 2rem;\n      }\n    "]
            }]
    }], function () { return [{ type: TreeviewConfig }]; }, { checkedChange: [{
            type: Output
        }], config: [{
            type: Input
        }], template: [{
            type: Input
        }], item: [{
            type: Input
        }] }); })();
    return TreeviewItemComponent;
}());
export { TreeviewItemComponent };

//# sourceMappingURL=treeview-item.component.js.map