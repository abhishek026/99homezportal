import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostListener, Injectable, Input, NgModule, Output, Renderer } from '@angular/core';
import { animate, keyframes, state, style, transition, trigger } from '@angular/animations';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function Ng2DropdownButton_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 3);
    ɵngcc0.ɵɵnamespaceSVG();
    ɵngcc0.ɵɵelementStart(1, "svg", 4);
    ɵngcc0.ɵɵelement(2, "path", 5);
    ɵngcc0.ɵɵelement(3, "g");
    ɵngcc0.ɵɵelement(4, "g");
    ɵngcc0.ɵɵelement(5, "g");
    ɵngcc0.ɵɵelement(6, "g");
    ɵngcc0.ɵɵelement(7, "g");
    ɵngcc0.ɵɵelement(8, "g");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c0 = ["*"];
function Ng2DropdownMenu_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r2 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵlistener("click", function Ng2DropdownMenu_div_3_Template_div_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r2); const ctx_r1 = ɵngcc0.ɵɵnextContext(); return ctx_r1.hide(); });
    ɵngcc0.ɵɵelementEnd();
} }
const _c1 = [[["ng2-dropdown-button"]], [["ng2-dropdown-menu"]]];
const _c2 = ["ng2-dropdown-button", "ng2-dropdown-menu"];
class Ng2DropdownButton {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.onMenuToggled = new EventEmitter();
        this.showCaret = true;
    }
    /**
     * \@name toggleMenu
     * @desc emits event to toggle menu
     * @return {?}
     */
    toggleMenu() {
        this.onMenuToggled.emit(true);
    }
    /**
     * \@name getPosition
     * @desc returns position of the button
     * @return {?}
     */
    getPosition() {
        return this.element.nativeElement.getBoundingClientRect();
    }
}
Ng2DropdownButton.ɵfac = function Ng2DropdownButton_Factory(t) { return new (t || Ng2DropdownButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
Ng2DropdownButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Ng2DropdownButton, selectors: [["ng2-dropdown-button"]], inputs: { showCaret: "showCaret" }, outputs: { onMenuToggled: "onMenuToggled" }, ngContentSelectors: _c0, decls: 4, vars: 1, consts: [["type", "button", "tabindex", "0s", 1, "ng2-dropdown-button", 3, "click"], [1, "ng2-dropdown-button__label"], ["class", "ng2-dropdown-button__caret", 4, "ngIf"], [1, "ng2-dropdown-button__caret"], ["enable-background", "new 0 0 32 32", "height", "16px", "id", "\u0421\u043B\u043E\u0439_1", "version", "1.1", "viewBox", "0 0 32 32", "width", "16px", 0, "xml", "space", "preserve", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink"], ["d", "M24.285,11.284L16,19.571l-8.285-8.288c-0.395-0.395-1.034-0.395-1.429,0  c-0.394,0.395-0.394,1.035,0,1.43l8.999,9.002l0,0l0,0c0.394,0.395,1.034,0.395,1.428,0l8.999-9.002  c0.394-0.395,0.394-1.036,0-1.431C25.319,10.889,24.679,10.889,24.285,11.284z", "fill", "#121313", "id", "Expand_More"]], template: function Ng2DropdownButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function Ng2DropdownButton_Template_button_click_0_listener() { return ctx.toggleMenu(); });
        ɵngcc0.ɵɵelementStart(1, "span", 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, Ng2DropdownButton_span_3_Template, 9, 0, "span", 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.showCaret);
    } }, directives: [ɵngcc1.NgIf], styles: [".ng2-dropdown-button[_ngcontent-%COMP%] {\n        font-family: \"Roboto\", \"Helvetica Neue\", Helvetica, Arial;\n        background: #fff;\n        padding: 0.45rem 0.25rem;\n        font-size: 14px;\n        letter-spacing: 0.08rem;\n        color: #444;\n        outline: 0;\n        cursor: pointer;\n        font-weight: 400;\n        border: none;\n        border-bottom: 1px solid #efefef;\n        text-align: left;\n        min-width: 100px;\n        width: 100%;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-orient: horizontal;\n        -webkit-box-direction: normal;\n            -ms-flex-direction: row;\n                flex-direction: row;\n        max-width: 150px; }\n\n      .ng2-dropdown-button[_ngcontent-%COMP%]:hover {\n        color: #222; }\n\n      .ng2-dropdown-button[_ngcontent-%COMP%]:active, .ng2-dropdown-button[_ngcontent-%COMP%]:focus {\n        color: #222;\n        border-bottom: 2px solid #2196F3; }\n\n      .ng2-dropdown-button__label[_ngcontent-%COMP%] {\n        -webkit-box-flex: 1;\n            -ms-flex: 1 1 95%;\n                flex: 1 1 95%; }\n\n      .ng2-dropdown-button__caret[_ngcontent-%COMP%] {\n        width: 12px;\n        height: 12px;\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-flex: 1;\n            -ms-flex: 1 1 6%;\n                flex: 1 1 6%; }\n\n      .ng2-dropdown-button--icon[_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%], .ng2-dropdown-button--icon   [_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%] {\n        border: none;\n        min-width: 40px;\n        width: 40px;\n        border-radius: 100%;\n        -webkit-transition: all 0.2s;\n        transition: all 0.2s;\n        text-align: center;\n        height: 40px;\n        padding: 0.5em; }\n\n      .ng2-dropdown-button--icon[_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%]:active, .ng2-dropdown-button--icon   [_nghost-%COMP%]   .ng2-dropdown-button[_ngcontent-%COMP%]:active {\n        background: rgba(0, 0, 0, 0.2); }"] });
/**
 * @nocollapse
 */
Ng2DropdownButton.ctorParameters = () => [
    { type: ElementRef, },
];
Ng2DropdownButton.propDecorators = {
    'onMenuToggled': [{ type: Output },],
    'showCaret': [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2DropdownButton, [{
        type: Component,
        args: [{
                selector: 'ng2-dropdown-button',
                styles: [`
      .ng2-dropdown-button {
        font-family: "Roboto", "Helvetica Neue", Helvetica, Arial;
        background: #fff;
        padding: 0.45rem 0.25rem;
        font-size: 14px;
        letter-spacing: 0.08rem;
        color: #444;
        outline: 0;
        cursor: pointer;
        font-weight: 400;
        border: none;
        border-bottom: 1px solid #efefef;
        text-align: left;
        min-width: 100px;
        width: 100%;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-orient: horizontal;
        -webkit-box-direction: normal;
            -ms-flex-direction: row;
                flex-direction: row;
        max-width: 150px; }

      .ng2-dropdown-button:hover {
        color: #222; }

      .ng2-dropdown-button:active,
      .ng2-dropdown-button:focus {
        color: #222;
        border-bottom: 2px solid #2196F3; }

      .ng2-dropdown-button__label {
        -webkit-box-flex: 1;
            -ms-flex: 1 1 95%;
                flex: 1 1 95%; }

      .ng2-dropdown-button__caret {
        width: 12px;
        height: 12px;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-flex: 1;
            -ms-flex: 1 1 6%;
                flex: 1 1 6%; }

      :host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button {
        border: none;
        min-width: 40px;
        width: 40px;
        border-radius: 100%;
        -webkit-transition: all 0.2s;
        transition: all 0.2s;
        text-align: center;
        height: 40px;
        padding: 0.5em; }

      :host-context(.ng2-dropdown-button--icon) .ng2-dropdown-button:active {
        background: rgba(0, 0, 0, 0.2); }
    `],
                template: `
      <button class='ng2-dropdown-button' type="button" (click)="toggleMenu()" tabindex="0s">
          <span class="ng2-dropdown-button__label">
              <ng-content></ng-content>
          </span>

          <span class="ng2-dropdown-button__caret" *ngIf="showCaret">
              <svg enable-background="new 0 0 32 32" height="16px" id="Слой_1" version="1.1" viewBox="0 0 32 32" width="16px" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M24.285,11.284L16,19.571l-8.285-8.288c-0.395-0.395-1.034-0.395-1.429,0  c-0.394,0.395-0.394,1.035,0,1.43l8.999,9.002l0,0l0,0c0.394,0.395,1.034,0.395,1.428,0l8.999-9.002  c0.394-0.395,0.394-1.036,0-1.431C25.319,10.889,24.679,10.889,24.285,11.284z" fill="#121313" id="Expand_More"/><g/><g/><g/><g/><g/><g/></svg>
          </span>
      </button>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { onMenuToggled: [{
            type: Output
        }], showCaret: [{
            type: Input
        }] }); })();

const KEYS = {
    BACKSPACE: 9,
    PREV: 38,
    NEXT: 40,
    ENTER: 13,
    ESCAPE: 27
};
/**
 * \@name onSwitchNext
 * @param index
 * @param items
 * @param state
 */
const onSwitchNext = (index, items, state$$1) => {
    if (index < items.length - 1) {
        state$$1.select(items[index + 1], true);
    }
};
/**
 * \@name onSwitchPrev
 * @param index
 * @param items
 * @param state
 */
const onSwitchPrev = (index, items, state$$1) => {
    if (index > 0) {
        state$$1.select(items[index - 1], true);
    }
};
/**
 * \@name onBackspace
 * @param index
 * @param items
 * @param state
 */
const onBackspace = (index, items, state$$1) => {
    if (index < items.length - 1) {
        state$$1.select(items[index + 1], true);
    }
    else {
        state$$1.select(items[0], true);
    }
};
/**
 * @this {?}
 * @return {?}
 */
function onEscape() {
    this.hide();
}

/**
 * \@name onItemClicked
 * @param index
 * @param items
 * @param state
 */
const onItemClicked = (index, items, state$$1) => {
    return state$$1.selectedItem ? state$$1.selectedItem.click() : undefined;
};
const ACTIONS = {
    [KEYS.BACKSPACE]: onBackspace,
    [KEYS.PREV]: onSwitchPrev,
    [KEYS.NEXT]: onSwitchNext,
    [KEYS.ENTER]: onItemClicked,
    [KEYS.ESCAPE]: onEscape
};
/**
 * @param {?} event
 * @return {?}
 */
function arrowKeysHandler(event) {
    if ([38, 40].indexOf(event.keyCode) > -1) {
        event.preventDefault();
    }
}

class Ng2DropdownState {
    constructor() {
        this.onItemSelected = new EventEmitter();
        this.onItemClicked = new EventEmitter();
        this.onItemDestroyed = new EventEmitter();
    }
    /**
     * \@name selectedItem
     * @desc getter for _selectedItem
     * @return {?}
     */
    get selectedItem() {
        return this._selectedItem;
    }
    /**
     * \@name selects a menu item and emits event
     * @param {?} item {Ng2MenuItem}
     * @param {?=} dispatchEvent {boolean}
     * @return {?}
     */
    select(item, dispatchEvent = true) {
        this._selectedItem = item;
        if (!dispatchEvent || !item) {
            return;
        }
        item.focus();
        this.onItemSelected.emit(item);
    }
    /**
     * \@name unselect
     * @desc sets _selectedItem as undefined
     * @return {?}
     */
    unselect() {
        this._selectedItem = undefined;
    }
}

class DropdownStateService {
    constructor() {
        this.menuState = {
            isVisible: /** @type {?} */ (false),
            /**
             * @return {?}
             */
            toString() {
                return this.isVisible === true ? 'visible' : 'hidden';
            }
        };
        this.dropdownState = new Ng2DropdownState();
    }
}
DropdownStateService.ɵfac = function DropdownStateService_Factory(t) { return new (t || DropdownStateService)(); };
DropdownStateService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: DropdownStateService, factory: DropdownStateService.ɵfac });
/**
 * @nocollapse
 */
DropdownStateService.ctorParameters = () => [];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DropdownStateService, [{
        type: Injectable
    }], function () { return []; }, null); })();

class Ng2MenuItem {
    /**
     * @param {?} state
     * @param {?} element
     * @param {?} renderer
     */
    constructor(state$$1, element, renderer) {
        this.state = state$$1;
        this.element = element;
        this.renderer = renderer;
        /**
         * \@preventClose
         * @desc if true, clicking on the item won't close the dropdown
         */
        this.preventClose = false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.state.dropdownState.onItemDestroyed.emit(this);
    }
    /**
     * \@name isSelected
     * @desc returns current selected item
     * @return {?}
     */
    get isSelected() {
        return this === this.state.dropdownState.selectedItem;
    }
    /**
     * \@name click
     * @desc emits select event
     * @param {?=} $event
     * @return {?}
     */
    select($event) {
        this.state.dropdownState.select(this, true);
        if ($event) {
            $event.stopPropagation();
            $event.preventDefault();
        }
    }
    /**
     * \@name click
     * @desc emits click event
     * @return {?}
     */
    click() {
        this.state.dropdownState.onItemClicked.emit(this);
    }
    /**
     * \@name focus
     * @return {?}
     */
    focus() {
        this.renderer.invokeElementMethod(this.element.nativeElement.children[0], 'focus');
    }
}
Ng2MenuItem.ɵfac = function Ng2MenuItem_Factory(t) { return new (t || Ng2MenuItem)(ɵngcc0.ɵɵdirectiveInject(DropdownStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
Ng2MenuItem.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Ng2MenuItem, selectors: [["ng2-menu-item"]], inputs: { preventClose: "preventClose", value: "value" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [["role", "button", "tabindex", "0", 1, "ng2-menu-item", 3, "keydown.enter", "click", "mouseover"]], template: function Ng2MenuItem_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("keydown.enter", function Ng2MenuItem_Template_div_keydown_enter_0_listener() { return ctx.click(); })("click", function Ng2MenuItem_Template_div_click_0_listener() { return ctx.click(); })("mouseover", function Ng2MenuItem_Template_div_mouseover_0_listener() { return ctx.select(); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ng2-menu-item--selected", ctx.isSelected);
    } }, styles: [".ng2-menu-item[_ngcontent-%COMP%] {\n        font-family: \"Roboto\", \"Helvetica Neue\", Helvetica, Arial;\n        background: #fff;\n        color: rgba(0, 0, 0, 0.87);\n        cursor: pointer;\n        font-size: 0.9em;\n        text-transform: none;\n        font-weight: 400;\n        letter-spacing: 0.03em;\n        height: 48px;\n        line-height: 48px;\n        padding: 0.3em 1.25rem;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n        -webkit-transition: background 0.25s;\n        transition: background 0.25s; }\n\n      .ng2-menu-item--selected[_ngcontent-%COMP%] {\n        background: rgba(158, 158, 158, 0.2);\n        outline: 0; }\n\n      .ng2-menu-item[_ngcontent-%COMP%]:focus {\n        outline: 0; }\n\n      .ng2-menu-item[_ngcontent-%COMP%]:active {\n        background: rgba(158, 158, 158, 0.4); }\n\n      ng2-menu-item[_nghost-%COMP%]     [ng2-menu-item-icon] {\n        vertical-align: middle;\n        font-size: 28px;\n        width: 1.5em;\n        height: 30px;\n        color: rgba(0, 0, 0, 0.44); }"] });
/**
 * @nocollapse
 */
Ng2MenuItem.ctorParameters = () => [
    { type: DropdownStateService, },
    { type: ElementRef, },
    { type: Renderer, },
];
Ng2MenuItem.propDecorators = {
    'preventClose': [{ type: Input },],
    'value': [{ type: Input },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2MenuItem, [{
        type: Component,
        args: [{
                selector: 'ng2-menu-item',
                styles: [`
      .ng2-menu-item {
        font-family: "Roboto", "Helvetica Neue", Helvetica, Arial;
        background: #fff;
        color: rgba(0, 0, 0, 0.87);
        cursor: pointer;
        font-size: 0.9em;
        text-transform: none;
        font-weight: 400;
        letter-spacing: 0.03em;
        height: 48px;
        line-height: 48px;
        padding: 0.3em 1.25rem;
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
        -webkit-transition: background 0.25s;
        transition: background 0.25s; }

      .ng2-menu-item--selected {
        background: rgba(158, 158, 158, 0.2);
        outline: 0; }

      .ng2-menu-item:focus {
        outline: 0; }

      .ng2-menu-item:active {
        background: rgba(158, 158, 158, 0.4); }

      :host(ng2-menu-item) /deep/ [ng2-menu-item-icon] {
        vertical-align: middle;
        font-size: 28px;
        width: 1.5em;
        height: 30px;
        color: rgba(0, 0, 0, 0.44); }
    `],
                template: `
      <div class='ng2-menu-item'
           role="button"
           tabindex="0"
           [class.ng2-menu-item--selected]="isSelected"
           (keydown.enter)="click()"
           (click)="click()"
           (mouseover)="select()">
              <ng-content></ng-content>
      </div>
    `
            }]
    }], function () { return [{ type: DropdownStateService }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { preventClose: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

class Ng2DropdownMenu {
    /**
     * @param {?} state
     * @param {?} element
     * @param {?} renderer
     */
    constructor(state$$1, element, renderer) {
        this.state = state$$1;
        this.element = element;
        this.renderer = renderer;
        /**
         * \@name width
         */
        this.width = 4;
        /**
         * \@description if set to true, the first element of the dropdown will be automatically focused
         * \@name focusFirstElement
         */
        this.focusFirstElement = true;
        /**
         * \@name appendToBody
         */
        this.appendToBody = true;
        /**
         * \@name zIndex
         */
        this.zIndex = 1000;
        this.listeners = {
            arrowHandler: undefined,
            handleKeypress: undefined
        };
    }
    /**
     * \@name show
     * \@shows menu and selects first item
     * @param {?=} position
     * @param {?=} dynamic
     * @return {?}
     */
    show(position, dynamic = true) {
        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;
        const /** @type {?} */ wd = typeof window !== 'undefined' ? window : undefined;
        if (!this.state.menuState.isVisible) {
            // setting handlers
            this.listeners.handleKeypress = this.renderer.listen(dc.body, 'keydown', this.handleKeypress.bind(this));
            this.listeners.arrowHandler = this.renderer.listen(wd, 'keydown', arrowKeysHandler);
        }
        // update state
        this.state.menuState.isVisible = true;
        if (position) {
            this.updatePosition(position, dynamic);
        }
    }
    /**
     * \@name hide
     * @desc hides menu
     * @return {?}
     */
    hide() {
        this.state.menuState.isVisible = false;
        // reset selected item state
        this.state.dropdownState.unselect();
        // call function to unlisten
        this.listeners.arrowHandler ? this.listeners.arrowHandler() : undefined;
        this.listeners.handleKeypress ? this.listeners.handleKeypress() : undefined;
    }
    /**
     * \@name updatePosition
     * @desc updates the menu position every time it is toggled
     * @param {?} position {ClientRect}
     * @param {?} dynamic {boolean}
     * @return {?}
     */
    updatePosition(position, dynamic) {
        this.position = position;
        this.updateOnChange(dynamic);
    }
    /**
     * \@name handleKeypress
     * @desc executes functions on keyPress based on the key pressed
     * @param {?} $event
     * @return {?}
     */
    handleKeypress($event) {
        const /** @type {?} */ key = $event.keyCode;
        const /** @type {?} */ items = this.items.toArray();
        const /** @type {?} */ index = items.indexOf(this.state.dropdownState.selectedItem);
        if (!ACTIONS.hasOwnProperty(key)) {
            return;
        }
        ACTIONS[key].call(this, index, items, this.state.dropdownState);
    }
    /**
     * \@name getMenuElement
     * @return {?}
     */
    getMenuElement() {
        return this.element.nativeElement.children[0];
    }
    /**
     * \@name calcPositionOffset
     * @param {?} position
     * @return {?}
     */
    calcPositionOffset(position) {
        const /** @type {?} */ wd = typeof window !== 'undefined' ? window : undefined;
        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;
        if (!wd || !dc || !position) {
            return;
        }
        const /** @type {?} */ element = this.getMenuElement();
        const /** @type {?} */ supportPageOffset = wd.pageXOffset !== undefined;
        const /** @type {?} */ isCSS1Compat = ((dc.compatMode || '') === 'CSS1Compat');
        const /** @type {?} */ x = supportPageOffset ? wd.pageXOffset : isCSS1Compat ?
            dc.documentElement.scrollLeft : dc.body.scrollLeft;
        const /** @type {?} */ y = supportPageOffset ? wd.pageYOffset : isCSS1Compat ?
            dc.documentElement.scrollTop : dc.body.scrollTop;
        let { top, left } = this.applyOffset(`${position.top + (this.appendToBody ? y - 15 : 0)}px`, `${position.left + x - 5}px`);
        const /** @type {?} */ clientWidth = element.clientWidth;
        const /** @type {?} */ clientHeight = element.clientHeight;
        const /** @type {?} */ marginFromBottom = parseInt(top) + clientHeight + (this.appendToBody ? 0 : y - 15);
        const /** @type {?} */ marginFromRight = parseInt(left) + clientWidth;
        const /** @type {?} */ windowScrollHeight = wd.innerHeight + wd.scrollY;
        const /** @type {?} */ windowScrollWidth = wd.innerWidth + wd.scrollX;
        if (marginFromBottom >= windowScrollHeight) {
            top = `${parseInt(top.replace('px', '')) - clientHeight}px`;
        }
        if (marginFromRight >= windowScrollWidth) {
            const /** @type {?} */ marginRight = marginFromRight - windowScrollWidth + 30;
            left = `${parseInt(left.replace('px', '')) - marginRight}px`;
        }
        return { top, left };
    }
    /**
     * @param {?} top
     * @param {?} left
     * @return {?}
     */
    applyOffset(top, left) {
        if (!this.offset) {
            return { top, left };
        }
        const /** @type {?} */ offset = this.offset.split(' ');
        if (!offset[1]) {
            offset[1] = '0';
        }
        top = `${parseInt(top.replace('px', '')) + parseInt(offset[0])}px`;
        left = `${parseInt(left.replace('px', '')) + parseInt(offset[1])}px`;
        return { top, left };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ dc = typeof document !== 'undefined' ? document : undefined;
        if (this.appendToBody) {
            // append menu element to the body
            dc.body.appendChild(this.element.nativeElement);
        }
    }
    /**
     * @param {?=} dynamic
     * @return {?}
     */
    updateOnChange(dynamic = true) {
        const /** @type {?} */ element = this.getMenuElement();
        const /** @type {?} */ position = this.calcPositionOffset(this.position);
        if (position) {
            this.renderer.setElementStyle(element, 'top', position.top.toString());
            this.renderer.setElementStyle(element, 'left', position.left.toString());
        }
        // select first item unless user disabled this option
        if (this.focusFirstElement &&
            this.items.first &&
            !this.state.dropdownState.selectedItem) {
            this.state.dropdownState.select(this.items.first, false);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        const /** @type {?} */ elem = this.element.nativeElement;
        elem.parentNode.removeChild(elem);
        if (this.listeners.handleKeypress) {
            this.listeners.handleKeypress();
        }
    }
}
Ng2DropdownMenu.ɵfac = function Ng2DropdownMenu_Factory(t) { return new (t || Ng2DropdownMenu)(ɵngcc0.ɵɵdirectiveInject(DropdownStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Renderer)); };
Ng2DropdownMenu.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Ng2DropdownMenu, selectors: [["ng2-dropdown-menu"]], contentQueries: function Ng2DropdownMenu_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, Ng2MenuItem, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, inputs: { width: "width", focusFirstElement: "focusFirstElement", appendToBody: "appendToBody", zIndex: "zIndex", offset: "offset" }, ngContentSelectors: _c0, decls: 4, vars: 12, consts: [[1, "ng2-dropdown-menu__options-container"], ["class", "ng2-dropdown-backdrop", 3, "click", 4, "ngIf"], [1, "ng2-dropdown-backdrop", 3, "click"]], template: function Ng2DropdownMenu_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div");
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, Ng2DropdownMenu_div_3_Template, 1, 0, "div", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassMapInterpolate1("ng2-dropdown-menu ng2-dropdown-menu---width--", ctx.width, "");
        ɵngcc0.ɵɵstyleProp("z-index", ctx.zIndex);
        ɵngcc0.ɵɵclassProp("ng2-dropdown-menu--inside-element", !ctx.appendToBody)("ng2-dropdown-menu--open", ctx.state.menuState.isVisible);
        ɵngcc0.ɵɵproperty("@fade", ctx.state.menuState.toString());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@opacity", ctx.state.menuState.toString());
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.state.menuState.isVisible);
    } }, directives: [ɵngcc1.NgIf], styles: ["[_nghost-%COMP%] {\n        display: block; }\n\n      .ng2-dropdown-menu[_ngcontent-%COMP%] {\n        overflow-y: auto;\n        -webkit-box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n                box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);\n        position: absolute;\n        padding: 0.5em 0;\n        background: #fff;\n        border-radius: 1px;\n        max-height: 400px;\n        width: 260px;\n        min-height: 0;\n        display: block; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--inside-element[_ngcontent-%COMP%] {\n        position: fixed; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--width--2[_ngcontent-%COMP%] {\n        width: 200px; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--width--4[_ngcontent-%COMP%] {\n        width: 260px; }\n\n      .ng2-dropdown-menu.ng2-dropdown-menu--width--6[_ngcontent-%COMP%] {\n        width: 320px; }\n\n      .ng2-dropdown-backdrop[_ngcontent-%COMP%] {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        z-index: 1;\n        overflow: hidden; }\n\n      [_nghost-%COMP%]     .ng2-menu-divider {\n        height: 1px;\n        min-height: 1px;\n        max-height: 1px;\n        width: 100%;\n        display: block;\n        background: #f9f9f9; }"], data: { animation: [
            trigger('fade', [
                state('visible', style({ display: 'block', height: '*', width: '*' })),
                state('hidden', style({ display: 'none', overflow: 'hidden', height: 0, width: 0 })),
                transition('hidden => visible', [
                    animate('250ms ease-in', keyframes([
                        style({ opacity: 0, offset: 0 }),
                        style({ opacity: 1, offset: 1, height: '*', width: '*' }),
                    ]))
                ]),
                transition('visible => hidden', [
                    animate('350ms ease-out', keyframes([
                        style({ opacity: 1, offset: 0 }),
                        style({ opacity: 0, offset: 1, width: '0', height: '0' }),
                    ]))
                ])
            ]),
            trigger('opacity', [
                transition('hidden => visible', [
                    animate('450ms ease-in', keyframes([
                        style({ opacity: 0, offset: 0 }),
                        style({ opacity: 1, offset: 1 }),
                    ]))
                ]),
                transition('visible => hidden', [
                    animate('250ms ease-out', keyframes([
                        style({ opacity: 1, offset: 0 }),
                        style({ opacity: 0.5, offset: 0.3 }),
                        style({ opacity: 0, offset: 1 }),
                    ]))
                ])
            ])
        ] } });
/**
 * @nocollapse
 */
Ng2DropdownMenu.ctorParameters = () => [
    { type: DropdownStateService, },
    { type: ElementRef, },
    { type: Renderer, },
];
Ng2DropdownMenu.propDecorators = {
    'width': [{ type: Input },],
    'focusFirstElement': [{ type: Input },],
    'offset': [{ type: Input },],
    'appendToBody': [{ type: Input },],
    'zIndex': [{ type: Input },],
    'items': [{ type: ContentChildren, args: [Ng2MenuItem,] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2DropdownMenu, [{
        type: Component,
        args: [{
                selector: 'ng2-dropdown-menu',
                styles: [`
      :host {
        display: block; }

      .ng2-dropdown-menu {
        overflow-y: auto;
        -webkit-box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);
                box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.3);
        position: absolute;
        padding: 0.5em 0;
        background: #fff;
        border-radius: 1px;
        max-height: 400px;
        width: 260px;
        min-height: 0;
        display: block; }

      .ng2-dropdown-menu.ng2-dropdown-menu--inside-element {
        position: fixed; }

      .ng2-dropdown-menu.ng2-dropdown-menu--width--2 {
        width: 200px; }

      .ng2-dropdown-menu.ng2-dropdown-menu--width--4 {
        width: 260px; }

      .ng2-dropdown-menu.ng2-dropdown-menu--width--6 {
        width: 320px; }

      .ng2-dropdown-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 1;
        overflow: hidden; }

      :host /deep/ .ng2-menu-divider {
        height: 1px;
        min-height: 1px;
        max-height: 1px;
        width: 100%;
        display: block;
        background: #f9f9f9; }
    `],
                template: `
      <!-- MENU -->
      <div class='ng2-dropdown-menu ng2-dropdown-menu---width--{{ width }}'
           [class.ng2-dropdown-menu--inside-element]="!appendToBody"
           [class.ng2-dropdown-menu--open]="state.menuState.isVisible"
           [style.z-index]="zIndex"
           [@fade]="state.menuState.toString()">
              <div class="ng2-dropdown-menu__options-container"
                   [@opacity]="state.menuState.toString()">
                  <ng-content></ng-content>
              </div>
      </div>

      <!-- BACKDROP -->
      <div class="ng2-dropdown-backdrop" *ngIf="state.menuState.isVisible" (click)="hide()"></div>
    `,
                animations: [
                    trigger('fade', [
                        state('visible', style({ display: 'block', height: '*', width: '*' })),
                        state('hidden', style({ display: 'none', overflow: 'hidden', height: 0, width: 0 })),
                        transition('hidden => visible', [
                            animate('250ms ease-in', keyframes([
                                style({ opacity: 0, offset: 0 }),
                                style({ opacity: 1, offset: 1, height: '*', width: '*' }),
                            ]))
                        ]),
                        transition('visible => hidden', [
                            animate('350ms ease-out', keyframes([
                                style({ opacity: 1, offset: 0 }),
                                style({ opacity: 0, offset: 1, width: '0', height: '0' }),
                            ]))
                        ])
                    ]),
                    trigger('opacity', [
                        transition('hidden => visible', [
                            animate('450ms ease-in', keyframes([
                                style({ opacity: 0, offset: 0 }),
                                style({ opacity: 1, offset: 1 }),
                            ]))
                        ]),
                        transition('visible => hidden', [
                            animate('250ms ease-out', keyframes([
                                style({ opacity: 1, offset: 0 }),
                                style({ opacity: 0.5, offset: 0.3 }),
                                style({ opacity: 0, offset: 1 }),
                            ]))
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: DropdownStateService }, { type: ɵngcc0.ElementRef }, { type: Renderer }]; }, { width: [{
            type: Input
        }], focusFirstElement: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], zIndex: [{
            type: Input
        }], offset: [{
            type: Input
        }], items: [{
            type: ContentChildren,
            args: [Ng2MenuItem]
        }] }); })();

class Ng2Dropdown {
    /**
     * @param {?} state
     */
    constructor(state$$1) {
        this.state = state$$1;
        this.dynamicUpdate = true;
        this.onItemClicked = new EventEmitter();
        this.onItemSelected = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onHide = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.state.dropdownState.onItemClicked.subscribe(item => {
            this.onItemClicked.emit(item);
            if (item.preventClose) {
                return;
            }
            this.hide.call(this);
        });
        if (this.button) {
            this.button.onMenuToggled.subscribe(() => {
                this.toggleMenu();
            });
        }
        this.state.dropdownState.onItemSelected.subscribe(item => {
            this.onItemSelected.emit(item);
        });
        this.state.dropdownState.onItemDestroyed.subscribe((item) => {
            let /** @type {?} */ newSelectedItem;
            const /** @type {?} */ items = this.menu.items.toArray();
            if (item !== this.state.dropdownState.selectedItem) {
                return;
            }
            if (this.menu.focusFirstElement) {
                newSelectedItem = item === items[0] && items.length > 1 ? items[1] : items[0];
            }
            this.state.dropdownState.select(newSelectedItem);
        });
    }
    /**
     * \@name toggleMenu
     * @desc toggles menu visibility
     * @param {?=} position
     * @return {?}
     */
    toggleMenu(position = this.button.getPosition()) {
        this.state.menuState.isVisible ? this.hide() : this.show(position);
    }
    /**
     * - hides dropdown
     * \@name hide
     * @return {?}
     */
    hide() {
        this.menu.hide();
        this.onHide.emit(this);
    }
    /**
     * - shows dropdown
     * \@name show
     * @param {?=} position
     * @return {?}
     */
    show(position = this.button.getPosition()) {
        this.menu.show(position, this.dynamicUpdate);
        this.onShow.emit(this);
    }
    /**
     * \@name scrollListener
     * @return {?}
     */
    scrollListener() {
        if (this.button && this.dynamicUpdate) {
            this.menu.updatePosition(this.button.getPosition(), true);
        }
    }
}
Ng2Dropdown.ɵfac = function Ng2Dropdown_Factory(t) { return new (t || Ng2Dropdown)(ɵngcc0.ɵɵdirectiveInject(DropdownStateService)); };
Ng2Dropdown.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Ng2Dropdown, selectors: [["ng2-dropdown"]], contentQueries: function Ng2Dropdown_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, Ng2DropdownButton, true);
        ɵngcc0.ɵɵcontentQuery(dirIndex, Ng2DropdownMenu, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.button = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.menu = _t.first);
    } }, hostBindings: function Ng2Dropdown_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("scroll", function Ng2Dropdown_scroll_HostBindingHandler() { return ctx.scrollListener(); }, false, ɵngcc0.ɵɵresolveWindow);
    } }, inputs: { dynamicUpdate: "dynamicUpdate" }, outputs: { onItemClicked: "onItemClicked", onItemSelected: "onItemSelected", onShow: "onShow", onHide: "onHide" }, features: [ɵngcc0.ɵɵProvidersFeature([DropdownStateService])], ngContentSelectors: _c2, decls: 3, vars: 0, consts: [[1, "ng2-dropdown-container"]], template: function Ng2Dropdown_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵprojection(2, 1);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/**
 * @nocollapse
 */
Ng2Dropdown.ctorParameters = () => [
    { type: DropdownStateService, },
];
Ng2Dropdown.propDecorators = {
    'button': [{ type: ContentChild, args: [Ng2DropdownButton,] },],
    'menu': [{ type: ContentChild, args: [Ng2DropdownMenu,] },],
    'dynamicUpdate': [{ type: Input },],
    'onItemClicked': [{ type: Output },],
    'onItemSelected': [{ type: Output },],
    'onShow': [{ type: Output },],
    'onHide': [{ type: Output },],
    'scrollListener': [{ type: HostListener, args: ['window:scroll',] },],
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2Dropdown, [{
        type: Component,
        args: [{
                selector: 'ng2-dropdown',
                template: `
      <div class="ng2-dropdown-container">
          <ng-content select="ng2-dropdown-button"></ng-content>
          <ng-content select="ng2-dropdown-menu"></ng-content>
      </div>
    `,
                providers: [DropdownStateService]
            }]
    }], function () { return [{ type: DropdownStateService }]; }, { dynamicUpdate: [{
            type: Input
        }], onItemClicked: [{
            type: Output
        }], onItemSelected: [{
            type: Output
        }], onShow: [{
            type: Output
        }], onHide: [{
            type: Output
        }], scrollListener: [{
            type: HostListener,
            args: ['window:scroll']
        }], button: [{
            type: ContentChild,
            args: [Ng2DropdownButton]
        }], menu: [{
            type: ContentChild,
            args: [Ng2DropdownMenu]
        }] }); })();

class Ng2DropdownModule {
}
Ng2DropdownModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: Ng2DropdownModule });
Ng2DropdownModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function Ng2DropdownModule_Factory(t) { return new (t || Ng2DropdownModule)(); }, imports: [[
            CommonModule
        ]] });
/**
 * @nocollapse
 */
Ng2DropdownModule.ctorParameters = () => [];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(Ng2DropdownModule, { declarations: function () { return [Ng2Dropdown, Ng2MenuItem, Ng2DropdownButton, Ng2DropdownMenu]; }, imports: function () { return [CommonModule]; }, exports: function () { return [Ng2MenuItem, Ng2DropdownButton, Ng2DropdownMenu, Ng2Dropdown]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Ng2DropdownModule, [{
        type: NgModule,
        args: [{
                exports: [
                    Ng2MenuItem,
                    Ng2DropdownButton,
                    Ng2DropdownMenu,
                    Ng2Dropdown
                ],
                declarations: [
                    Ng2Dropdown,
                    Ng2MenuItem,
                    Ng2DropdownButton,
                    Ng2DropdownMenu,
                ],
                imports: [
                    CommonModule
                ]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { Ng2Dropdown, Ng2DropdownMenu, Ng2MenuItem, Ng2DropdownButton, Ng2DropdownModule, DropdownStateService };

//# sourceMappingURL=ng2-material-dropdown.js.map