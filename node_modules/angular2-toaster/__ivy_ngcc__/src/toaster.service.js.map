{"version":3,"file":"toaster.service.js","sources":["../../src/toaster.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\r\nimport {Toast} from './toast';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/share';\r\nimport {Observer} from 'rxjs/Observer';\r\nimport {Subject} from 'rxjs/Subject';\r\n\r\n\r\n\r\nexport class ToasterService {\r\n    addToast: Observable<Toast>;\r\n    private _addToast: Observer<Toast>;\r\n\r\n    clearToasts: Observable<IClearWrapper>;\r\n    private _clearToasts: Observer<IClearWrapper>;\r\n\r\n    removeToast: Observable<IClearWrapper>;\r\n    /** @internal */\r\n    _removeToastSubject: Subject<IClearWrapper>\r\n\r\n    /**\r\n     * Creates an instance of ToasterService.\r\n     */\r\n    constructor() {\r\n        this.addToast = new Observable<Toast>((observer: any) => this._addToast = observer).share();\r\n        this.clearToasts = new Observable<IClearWrapper>((observer: any) => this._clearToasts = observer).share();\r\n        this._removeToastSubject = new Subject<IClearWrapper>()\r\n        this.removeToast = this._removeToastSubject.share();\r\n    }\r\n\r\n    /**\r\n     * Synchronously create and show a new toast instance.\r\n     *\r\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\r\n     * @param {string=} title The toast title.\r\n     * @param {string=} body The toast body.\r\n     * @returns {Toast}\r\n     *          The newly created Toast instance with a randomly generated GUID Id.\r\n     */\r\n    pop(type: string | Toast, title?: string, body?: string): Toast {\r\n        const toast = typeof type === 'string' ? { type: type, title: title, body: body } : type;\r\n\r\n        toast.toastId = Guid.newGuid();\r\n\r\n        if (!this._addToast) {\r\n            throw new Error('No Toaster Containers have been initialized to receive toasts.');\r\n        }\r\n\r\n        this._addToast.next(toast);\r\n        return toast;\r\n    }\r\n\r\n\r\n    /**\r\n     * Asynchronously create and show a new toast instance.\r\n     *\r\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\r\n     * @param {string=} title The toast title.\r\n     * @param {string=} body The toast body.\r\n     * @returns {Observable<Toast>}\r\n     *          A hot Observable that can be subscribed to in order to receive the Toast instance\r\n     *          with a randomly generated GUID Id.\r\n     */\r\n    popAsync(type: string | Toast, title?: string, body?: string): Observable<Toast> {\r\n        setTimeout(() => {\r\n            this.pop(type, title, body);\r\n        }, 0);\r\n\r\n        return this.addToast;\r\n    }\r\n\r\n\r\n    /**\r\n     * Clears a toast by toastId and/or toastContainerId.\r\n     *\r\n     * @param {string} toastId The toastId to clear.\r\n     * @param {number=} toastContainerId\r\n     *        The toastContainerId of the container to remove toasts from.\r\n     */\r\n    clear(toastId?: string, toastContainerId?: number) {\r\n        const clearWrapper: IClearWrapper = {\r\n            toastId: toastId, toastContainerId: toastContainerId\r\n        };\r\n\r\n        this._clearToasts.next(clearWrapper)\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\r\nexport interface IClearWrapper {\r\n    toastId?: string;\r\n    toastContainerId?: number;\r\n}\r\n\r\n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\r\nclass Guid {\r\n    static newGuid() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            const r = Math.random() * 16 | 0, v = c === 'x' ? r : ( r & 0x3 | 0x8 );\r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}