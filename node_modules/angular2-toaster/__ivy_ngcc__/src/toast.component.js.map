{"version":3,"file":"toast.component.js","sources":["../../src/toast.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, Input, Output, ViewChild, ViewContainerRef, EventEmitter,\r\n    ComponentFactoryResolver, ChangeDetectorRef, OnInit, AfterViewInit\r\n} from '@angular/core';\r\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\r\nimport {Toast} from './toast';\r\nimport {BodyOutputType} from './bodyOutputType';\r\n\r\n\r\n\r\nexport class ToastComponent implements OnInit, AfterViewInit {\r\n\r\n     toast: Toast;\r\n     iconClass: string;\r\n     componentBody: ViewContainerRef;\r\n\r\n    safeCloseHtml: SafeHtml;\r\n\r\n    public bodyOutputType = BodyOutputType;\r\n\r\n    \r\n    public clickEvent = new EventEmitter();\r\n\r\n    constructor(\r\n      private sanitizer: DomSanitizer,\r\n      private componentFactoryResolver: ComponentFactoryResolver,\r\n      private changeDetectorRef: ChangeDetectorRef\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this.toast.closeHtml) {\r\n            this.safeCloseHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.closeHtml);\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\r\n            const component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\r\n            const componentInstance: any = this.componentBody.createComponent(component, undefined, this.componentBody.injector);\r\n            componentInstance.instance.toast = this.toast;\r\n            this.changeDetectorRef.detectChanges();\r\n        }\r\n    }\r\n\r\n    click(event: MouseEvent, toast: Toast) {\r\n        event.stopPropagation();\r\n        this.clickEvent.emit({\r\n            value : { toast: toast, isCloseButton: true}\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n    selector: '[toastComp]',\r\n    template: `\r\n        <i class=\"toaster-icon\" [ngClass]=\"iconClass\"></i>\r\n        <div class=\"toast-content\">\r\n            <div [ngClass]=\"toast.toasterConfig?.titleClass\">{{toast.title}}</div>\r\n            <div [ngClass]=\"toast.toasterConfig?.messageClass\" [ngSwitch]=\"toast.bodyOutputType\">\r\n                <div *ngSwitchCase=\"bodyOutputType.Component\" #componentBody></div>\r\n                <div *ngSwitchCase=\"bodyOutputType.TrustedHtml\" [innerHTML]=\"toast.body\"></div>\r\n                <div *ngSwitchCase=\"bodyOutputType.Default\">{{toast.body}}</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"toast-close-button\" *ngIf=\"toast.showCloseButton\" (click)=\"click($event, toast)\"\r\n            [innerHTML]=\"safeCloseHtml\">\r\n        </div>`\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, },\n{type: ComponentFactoryResolver, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'toast': [{ type: Input },],\n'iconClass': [{ type: Input },],\n'componentBody': [{ type: ViewChild, args: ['componentBody', { read: ViewContainerRef }, ] },],\n'clickEvent': [{ type: Output },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}